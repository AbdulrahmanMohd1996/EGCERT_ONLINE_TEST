
EGCERT_MASTERMC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000029c2  00002a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000032c  0080006e  0080006e  00002a64  2**0
                  ALLOC
  3 .stab         00004a40  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000341c  00000000  00000000  000074a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 df 14 	jmp	0x29be	; 0x29be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	df 93       	push	r29
      a2:	cf 93       	push	r28
      a4:	cd b7       	in	r28, 0x3d	; 61
      a6:	de b7       	in	r29, 0x3e	; 62
      a8:	20 e6       	ldi	r18, 0x60	; 96
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	89 e6       	ldi	r24, 0x69	; 105
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	b9 01       	movw	r22, r18
      b2:	42 e3       	ldi	r20, 0x32	; 50
      b4:	50 e0       	ldi	r21, 0x00	; 0
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	ee 24       	eor	r14, r14
      be:	ff 24       	eor	r15, r15
      c0:	cc 24       	eor	r12, r12
      c2:	dd 24       	eor	r13, r13
      c4:	aa 24       	eor	r10, r10
      c6:	bb 24       	eor	r11, r11
      c8:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskGenericCreate>
      cc:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <vTaskStartScheduler>
      d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x3e>

000000d2 <task1_code>:
	return 0;
}


void task1_code(void*pvParamter)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	27 97       	sbiw	r28, 0x07	; 7
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	9f 83       	std	Y+7, r25	; 0x07
      e8:	8e 83       	std	Y+6, r24	; 0x06
	spiSettings Master_Settings={MSB_FIRST,IDLE_AT_LOW,SAMPLE_AT_LEADING,CPU_F_BY_128};
      ea:	1a 82       	std	Y+2, r1	; 0x02
      ec:	1b 82       	std	Y+3, r1	; 0x03
      ee:	1c 82       	std	Y+4, r1	; 0x04
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	8d 83       	std	Y+5, r24	; 0x05
	SPI_MasterInit(&Master_Settings);
      f4:	ce 01       	movw	r24, r28
      f6:	02 96       	adiw	r24, 0x02	; 2
      f8:	0e 94 bc 13 	call	0x2778	; 0x2778 <SPI_MasterInit>

	DDRA=0X0F;
      fc:	ea e3       	ldi	r30, 0x3A	; 58
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	8f e0       	ldi	r24, 0x0F	; 15
     102:	80 83       	st	Z, r24
	PORTA=0X00;
     104:	eb e3       	ldi	r30, 0x3B	; 59
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	10 82       	st	Z, r1
	SPI_MasterSendReciveByte('R');
     10a:	82 e5       	ldi	r24, 0x52	; 82
     10c:	0e 94 1f 14 	call	0x283e	; 0x283e <SPI_MasterSendReciveByte>
	PORTA=0X0F;
     110:	eb e3       	ldi	r30, 0x3B	; 59
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	8f e0       	ldi	r24, 0x0F	; 15
     116:	80 83       	st	Z, r24

	while(1)
	{
		for(uint8 i=0;i<4;i++)
     118:	19 82       	std	Y+1, r1	; 0x01
     11a:	3a c0       	rjmp	.+116    	; 0x190 <task1_code+0xbe>
		{
			CLEAR_BIT(PORTA,i);
     11c:	ab e3       	ldi	r26, 0x3B	; 59
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	eb e3       	ldi	r30, 0x3B	; 59
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	48 2f       	mov	r20, r24
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	02 c0       	rjmp	.+4      	; 0x138 <task1_code+0x66>
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	2a 95       	dec	r18
     13a:	e2 f7       	brpl	.-8      	; 0x134 <task1_code+0x62>
     13c:	80 95       	com	r24
     13e:	84 23       	and	r24, r20
     140:	8c 93       	st	X, r24
			SPI_MasterSendReciveByte('G');
     142:	87 e4       	ldi	r24, 0x47	; 71
     144:	0e 94 1f 14 	call	0x283e	; 0x283e <SPI_MasterSendReciveByte>
			vTaskDelay(1000);
     148:	88 ee       	ldi	r24, 0xE8	; 232
     14a:	93 e0       	ldi	r25, 0x03	; 3
     14c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <vTaskDelay>
			SPI_MasterSendReciveByte('Y');
     150:	89 e5       	ldi	r24, 0x59	; 89
     152:	0e 94 1f 14 	call	0x283e	; 0x283e <SPI_MasterSendReciveByte>
			vTaskDelay(500);
     156:	84 ef       	ldi	r24, 0xF4	; 244
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <vTaskDelay>
			SPI_MasterSendReciveByte('R');
     15e:	82 e5       	ldi	r24, 0x52	; 82
     160:	0e 94 1f 14 	call	0x283e	; 0x283e <SPI_MasterSendReciveByte>
			SET_BIT(PORTA,i);
     164:	ab e3       	ldi	r26, 0x3B	; 59
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	eb e3       	ldi	r30, 0x3B	; 59
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	48 2f       	mov	r20, r24
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	28 2f       	mov	r18, r24
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	02 2e       	mov	r0, r18
     17c:	02 c0       	rjmp	.+4      	; 0x182 <task1_code+0xb0>
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	0a 94       	dec	r0
     184:	e2 f7       	brpl	.-8      	; 0x17e <task1_code+0xac>
     186:	84 2b       	or	r24, r20
     188:	8c 93       	st	X, r24
	SPI_MasterSendReciveByte('R');
	PORTA=0X0F;

	while(1)
	{
		for(uint8 i=0;i<4;i++)
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	8f 5f       	subi	r24, 0xFF	; 255
     18e:	89 83       	std	Y+1, r24	; 0x01
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	84 30       	cpi	r24, 0x04	; 4
     194:	18 f2       	brcs	.-122    	; 0x11c <task1_code+0x4a>
     196:	c0 cf       	rjmp	.-128    	; 0x118 <task1_code+0x46>

00000198 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	27 97       	sbiw	r28, 0x07	; 7
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61
     1ac:	9d 83       	std	Y+5, r25	; 0x05
     1ae:	8c 83       	std	Y+4, r24	; 0x04
     1b0:	6e 83       	std	Y+6, r22	; 0x06
     1b2:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     1b4:	8a e1       	ldi	r24, 0x1A	; 26
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 a4 03 	call	0x748	; 0x748 <pvPortMalloc>
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	09 f4       	brne	.+2      	; 0x1ca <xCoRoutineCreate+0x32>
     1c8:	6f c0       	rjmp	.+222    	; 0x2a8 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     1ca:	80 91 6e 00 	lds	r24, 0x006E
     1ce:	90 91 6f 00 	lds	r25, 0x006F
     1d2:	00 97       	sbiw	r24, 0x00	; 0
     1d4:	41 f4       	brne	.+16     	; 0x1e6 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
     1da:	90 93 6f 00 	sts	0x006F, r25
     1de:	80 93 6e 00 	sts	0x006E, r24
			prvInitialiseCoRoutineLists();
     1e2:	0e 94 33 03 	call	0x666	; 0x666 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     1e6:	8e 81       	ldd	r24, Y+6	; 0x06
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	10 f0       	brcs	.+4      	; 0x1f0 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     1f0:	e9 81       	ldd	r30, Y+1	; 0x01
     1f2:	fa 81       	ldd	r31, Y+2	; 0x02
     1f4:	11 8e       	std	Z+25, r1	; 0x19
     1f6:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     1f8:	e9 81       	ldd	r30, Y+1	; 0x01
     1fa:	fa 81       	ldd	r31, Y+2	; 0x02
     1fc:	8e 81       	ldd	r24, Y+6	; 0x06
     1fe:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     200:	e9 81       	ldd	r30, Y+1	; 0x01
     202:	fa 81       	ldd	r31, Y+2	; 0x02
     204:	8f 81       	ldd	r24, Y+7	; 0x07
     206:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     208:	e9 81       	ldd	r30, Y+1	; 0x01
     20a:	fa 81       	ldd	r31, Y+2	; 0x02
     20c:	8c 81       	ldd	r24, Y+4	; 0x04
     20e:	9d 81       	ldd	r25, Y+5	; 0x05
     210:	91 83       	std	Z+1, r25	; 0x01
     212:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	02 96       	adiw	r24, 0x02	; 2
     21a:	0e 94 3a 04 	call	0x874	; 0x874 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	9a 81       	ldd	r25, Y+2	; 0x02
     222:	0c 96       	adiw	r24, 0x0c	; 12
     224:	0e 94 3a 04 	call	0x874	; 0x874 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     228:	e9 81       	ldd	r30, Y+1	; 0x01
     22a:	fa 81       	ldd	r31, Y+2	; 0x02
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	9a 81       	ldd	r25, Y+2	; 0x02
     230:	91 87       	std	Z+9, r25	; 0x09
     232:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     234:	e9 81       	ldd	r30, Y+1	; 0x01
     236:	fa 81       	ldd	r31, Y+2	; 0x02
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	9a 81       	ldd	r25, Y+2	; 0x02
     23c:	93 8b       	std	Z+19, r25	; 0x13
     23e:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     240:	8e 81       	ldd	r24, Y+6	; 0x06
     242:	28 2f       	mov	r18, r24
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	85 e0       	ldi	r24, 0x05	; 5
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	82 1b       	sub	r24, r18
     24c:	93 0b       	sbc	r25, r19
     24e:	e9 81       	ldd	r30, Y+1	; 0x01
     250:	fa 81       	ldd	r31, Y+2	; 0x02
     252:	95 87       	std	Z+13, r25	; 0x0d
     254:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     256:	e9 81       	ldd	r30, Y+1	; 0x01
     258:	fa 81       	ldd	r31, Y+2	; 0x02
     25a:	96 89       	ldd	r25, Z+22	; 0x16
     25c:	80 91 70 00 	lds	r24, 0x0070
     260:	89 17       	cp	r24, r25
     262:	28 f4       	brcc	.+10     	; 0x26e <xCoRoutineCreate+0xd6>
     264:	e9 81       	ldd	r30, Y+1	; 0x01
     266:	fa 81       	ldd	r31, Y+2	; 0x02
     268:	86 89       	ldd	r24, Z+22	; 0x16
     26a:	80 93 70 00 	sts	0x0070, r24
     26e:	e9 81       	ldd	r30, Y+1	; 0x01
     270:	fa 81       	ldd	r31, Y+2	; 0x02
     272:	86 89       	ldd	r24, Z+22	; 0x16
     274:	28 2f       	mov	r18, r24
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	c9 01       	movw	r24, r18
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	82 0f       	add	r24, r18
     288:	93 1f       	adc	r25, r19
     28a:	ac 01       	movw	r20, r24
     28c:	49 58       	subi	r20, 0x89	; 137
     28e:	5f 4f       	sbci	r21, 0xFF	; 255
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	9c 01       	movw	r18, r24
     296:	2e 5f       	subi	r18, 0xFE	; 254
     298:	3f 4f       	sbci	r19, 0xFF	; 255
     29a:	ca 01       	movw	r24, r20
     29c:	b9 01       	movw	r22, r18
     29e:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>

		xReturn = pdPASS;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	8b 83       	std	Y+3, r24	; 0x03
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     2ac:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2ae:	27 96       	adiw	r28, 0x07	; 7
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	cf 91       	pop	r28
     2bc:	df 91       	pop	r29
     2be:	08 95       	ret

000002c0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     2c0:	df 93       	push	r29
     2c2:	cf 93       	push	r28
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <vCoRoutineAddToDelayedList+0x6>
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <vCoRoutineAddToDelayedList+0x8>
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <vCoRoutineAddToDelayedList+0xa>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	9c 83       	std	Y+4, r25	; 0x04
     2d0:	8b 83       	std	Y+3, r24	; 0x03
     2d2:	7e 83       	std	Y+6, r23	; 0x06
     2d4:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     2d6:	20 91 71 00 	lds	r18, 0x0071
     2da:	30 91 72 00 	lds	r19, 0x0072
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	82 0f       	add	r24, r18
     2e4:	93 1f       	adc	r25, r19
     2e6:	9a 83       	std	Y+2, r25	; 0x02
     2e8:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     2ea:	80 91 6e 00 	lds	r24, 0x006E
     2ee:	90 91 6f 00 	lds	r25, 0x006F
     2f2:	02 96       	adiw	r24, 0x02	; 2
     2f4:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     2f8:	e0 91 6e 00 	lds	r30, 0x006E
     2fc:	f0 91 6f 00 	lds	r31, 0x006F
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	93 83       	std	Z+3, r25	; 0x03
     306:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     308:	20 91 71 00 	lds	r18, 0x0071
     30c:	30 91 72 00 	lds	r19, 0x0072
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	9a 81       	ldd	r25, Y+2	; 0x02
     314:	82 17       	cp	r24, r18
     316:	93 07       	cpc	r25, r19
     318:	70 f4       	brcc	.+28     	; 0x336 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     31a:	80 91 9d 00 	lds	r24, 0x009D
     31e:	90 91 9e 00 	lds	r25, 0x009E
     322:	20 91 6e 00 	lds	r18, 0x006E
     326:	30 91 6f 00 	lds	r19, 0x006F
     32a:	2e 5f       	subi	r18, 0xFE	; 254
     32c:	3f 4f       	sbci	r19, 0xFF	; 255
     32e:	b9 01       	movw	r22, r18
     330:	0e 94 96 04 	call	0x92c	; 0x92c <vListInsert>
     334:	0d c0       	rjmp	.+26     	; 0x350 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     336:	80 91 9b 00 	lds	r24, 0x009B
     33a:	90 91 9c 00 	lds	r25, 0x009C
     33e:	20 91 6e 00 	lds	r18, 0x006E
     342:	30 91 6f 00 	lds	r19, 0x006F
     346:	2e 5f       	subi	r18, 0xFE	; 254
     348:	3f 4f       	sbci	r19, 0xFF	; 255
     34a:	b9 01       	movw	r22, r18
     34c:	0e 94 96 04 	call	0x92c	; 0x92c <vListInsert>
	}

	if( pxEventList )
     350:	8d 81       	ldd	r24, Y+5	; 0x05
     352:	9e 81       	ldd	r25, Y+6	; 0x06
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	61 f0       	breq	.+24     	; 0x370 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     358:	80 91 6e 00 	lds	r24, 0x006E
     35c:	90 91 6f 00 	lds	r25, 0x006F
     360:	9c 01       	movw	r18, r24
     362:	24 5f       	subi	r18, 0xF4	; 244
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	8d 81       	ldd	r24, Y+5	; 0x05
     368:	9e 81       	ldd	r25, Y+6	; 0x06
     36a:	b9 01       	movw	r22, r18
     36c:	0e 94 96 04 	call	0x92c	; 0x92c <vListInsert>
	}
}
     370:	26 96       	adiw	r28, 0x06	; 6
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	08 95       	ret

00000382 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	00 d0       	rcall	.+0      	; 0x388 <prvCheckPendingReadyList+0x6>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	3a c0       	rjmp	.+116    	; 0x402 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     38e:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     390:	e0 91 a4 00 	lds	r30, 0x00A4
     394:	f0 91 a5 00 	lds	r31, 0x00A5
     398:	86 81       	ldd	r24, Z+6	; 0x06
     39a:	97 81       	ldd	r25, Z+7	; 0x07
     39c:	9a 83       	std	Y+2, r25	; 0x02
     39e:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	0c 96       	adiw	r24, 0x0c	; 12
     3a6:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     3aa:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	02 96       	adiw	r24, 0x02	; 2
     3b2:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     3b6:	e9 81       	ldd	r30, Y+1	; 0x01
     3b8:	fa 81       	ldd	r31, Y+2	; 0x02
     3ba:	96 89       	ldd	r25, Z+22	; 0x16
     3bc:	80 91 70 00 	lds	r24, 0x0070
     3c0:	89 17       	cp	r24, r25
     3c2:	28 f4       	brcc	.+10     	; 0x3ce <prvCheckPendingReadyList+0x4c>
     3c4:	e9 81       	ldd	r30, Y+1	; 0x01
     3c6:	fa 81       	ldd	r31, Y+2	; 0x02
     3c8:	86 89       	ldd	r24, Z+22	; 0x16
     3ca:	80 93 70 00 	sts	0x0070, r24
     3ce:	e9 81       	ldd	r30, Y+1	; 0x01
     3d0:	fa 81       	ldd	r31, Y+2	; 0x02
     3d2:	86 89       	ldd	r24, Z+22	; 0x16
     3d4:	28 2f       	mov	r18, r24
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	c9 01       	movw	r24, r18
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	82 0f       	add	r24, r18
     3e8:	93 1f       	adc	r25, r19
     3ea:	ac 01       	movw	r20, r24
     3ec:	49 58       	subi	r20, 0x89	; 137
     3ee:	5f 4f       	sbci	r21, 0xFF	; 255
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	9a 81       	ldd	r25, Y+2	; 0x02
     3f4:	9c 01       	movw	r18, r24
     3f6:	2e 5f       	subi	r18, 0xFE	; 254
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	ca 01       	movw	r24, r20
     3fc:	b9 01       	movw	r22, r18
     3fe:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     402:	80 91 9f 00 	lds	r24, 0x009F
     406:	88 23       	and	r24, r24
     408:	09 f0       	breq	.+2      	; 0x40c <prvCheckPendingReadyList+0x8a>
     40a:	c1 cf       	rjmp	.-126    	; 0x38e <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	cf 91       	pop	r28
     412:	df 91       	pop	r29
     414:	08 95       	ret

00000416 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	00 d0       	rcall	.+0      	; 0x41c <prvCheckDelayedList+0x6>
     41c:	00 d0       	rcall	.+0      	; 0x41e <prvCheckDelayedList+0x8>
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     422:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <xTaskGetTickCount>
     426:	20 91 73 00 	lds	r18, 0x0073
     42a:	30 91 74 00 	lds	r19, 0x0074
     42e:	82 1b       	sub	r24, r18
     430:	93 0b       	sbc	r25, r19
     432:	90 93 76 00 	sts	0x0076, r25
     436:	80 93 75 00 	sts	0x0075, r24
     43a:	85 c0       	rjmp	.+266    	; 0x546 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     43c:	80 91 71 00 	lds	r24, 0x0071
     440:	90 91 72 00 	lds	r25, 0x0072
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	90 93 72 00 	sts	0x0072, r25
     44a:	80 93 71 00 	sts	0x0071, r24
		xPassedTicks--;
     44e:	80 91 75 00 	lds	r24, 0x0075
     452:	90 91 76 00 	lds	r25, 0x0076
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	90 93 76 00 	sts	0x0076, r25
     45c:	80 93 75 00 	sts	0x0075, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     460:	80 91 71 00 	lds	r24, 0x0071
     464:	90 91 72 00 	lds	r25, 0x0072
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	09 f0       	breq	.+2      	; 0x46e <prvCheckDelayedList+0x58>
     46c:	64 c0       	rjmp	.+200    	; 0x536 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     46e:	80 91 9b 00 	lds	r24, 0x009B
     472:	90 91 9c 00 	lds	r25, 0x009C
     476:	9a 83       	std	Y+2, r25	; 0x02
     478:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     47a:	80 91 9d 00 	lds	r24, 0x009D
     47e:	90 91 9e 00 	lds	r25, 0x009E
     482:	90 93 9c 00 	sts	0x009C, r25
     486:	80 93 9b 00 	sts	0x009B, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	90 93 9e 00 	sts	0x009E, r25
     492:	80 93 9d 00 	sts	0x009D, r24
     496:	4f c0       	rjmp	.+158    	; 0x536 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     498:	e0 91 9b 00 	lds	r30, 0x009B
     49c:	f0 91 9c 00 	lds	r31, 0x009C
     4a0:	05 80       	ldd	r0, Z+5	; 0x05
     4a2:	f6 81       	ldd	r31, Z+6	; 0x06
     4a4:	e0 2d       	mov	r30, r0
     4a6:	86 81       	ldd	r24, Z+6	; 0x06
     4a8:	97 81       	ldd	r25, Z+7	; 0x07
     4aa:	9c 83       	std	Y+4, r25	; 0x04
     4ac:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     4ae:	eb 81       	ldd	r30, Y+3	; 0x03
     4b0:	fc 81       	ldd	r31, Y+4	; 0x04
     4b2:	22 81       	ldd	r18, Z+2	; 0x02
     4b4:	33 81       	ldd	r19, Z+3	; 0x03
     4b6:	80 91 71 00 	lds	r24, 0x0071
     4ba:	90 91 72 00 	lds	r25, 0x0072
     4be:	82 17       	cp	r24, r18
     4c0:	93 07       	cpc	r25, r19
     4c2:	08 f4       	brcc	.+2      	; 0x4c6 <prvCheckDelayedList+0xb0>
     4c4:	40 c0       	rjmp	.+128    	; 0x546 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     4c6:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	9c 81       	ldd	r25, Y+4	; 0x04
     4cc:	02 96       	adiw	r24, 0x02	; 2
     4ce:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     4d2:	eb 81       	ldd	r30, Y+3	; 0x03
     4d4:	fc 81       	ldd	r31, Y+4	; 0x04
     4d6:	84 89       	ldd	r24, Z+20	; 0x14
     4d8:	95 89       	ldd	r25, Z+21	; 0x15
     4da:	00 97       	sbiw	r24, 0x00	; 0
     4dc:	29 f0       	breq	.+10     	; 0x4e8 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	9c 81       	ldd	r25, Y+4	; 0x04
     4e2:	0c 96       	adiw	r24, 0x0c	; 12
     4e4:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     4e8:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     4ea:	eb 81       	ldd	r30, Y+3	; 0x03
     4ec:	fc 81       	ldd	r31, Y+4	; 0x04
     4ee:	96 89       	ldd	r25, Z+22	; 0x16
     4f0:	80 91 70 00 	lds	r24, 0x0070
     4f4:	89 17       	cp	r24, r25
     4f6:	28 f4       	brcc	.+10     	; 0x502 <prvCheckDelayedList+0xec>
     4f8:	eb 81       	ldd	r30, Y+3	; 0x03
     4fa:	fc 81       	ldd	r31, Y+4	; 0x04
     4fc:	86 89       	ldd	r24, Z+22	; 0x16
     4fe:	80 93 70 00 	sts	0x0070, r24
     502:	eb 81       	ldd	r30, Y+3	; 0x03
     504:	fc 81       	ldd	r31, Y+4	; 0x04
     506:	86 89       	ldd	r24, Z+22	; 0x16
     508:	28 2f       	mov	r18, r24
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	c9 01       	movw	r24, r18
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
     51e:	ac 01       	movw	r20, r24
     520:	49 58       	subi	r20, 0x89	; 137
     522:	5f 4f       	sbci	r21, 0xFF	; 255
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	9c 81       	ldd	r25, Y+4	; 0x04
     528:	9c 01       	movw	r18, r24
     52a:	2e 5f       	subi	r18, 0xFE	; 254
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	ca 01       	movw	r24, r20
     530:	b9 01       	movw	r22, r18
     532:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     536:	e0 91 9b 00 	lds	r30, 0x009B
     53a:	f0 91 9c 00 	lds	r31, 0x009C
     53e:	80 81       	ld	r24, Z
     540:	88 23       	and	r24, r24
     542:	09 f0       	breq	.+2      	; 0x546 <prvCheckDelayedList+0x130>
     544:	a9 cf       	rjmp	.-174    	; 0x498 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     546:	80 91 75 00 	lds	r24, 0x0075
     54a:	90 91 76 00 	lds	r25, 0x0076
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	09 f0       	breq	.+2      	; 0x554 <prvCheckDelayedList+0x13e>
     552:	74 cf       	rjmp	.-280    	; 0x43c <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     554:	80 91 71 00 	lds	r24, 0x0071
     558:	90 91 72 00 	lds	r25, 0x0072
     55c:	90 93 74 00 	sts	0x0074, r25
     560:	80 93 73 00 	sts	0x0073, r24
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	08 95       	ret

00000572 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     572:	df 93       	push	r29
     574:	cf 93       	push	r28
     576:	00 d0       	rcall	.+0      	; 0x578 <vCoRoutineSchedule+0x6>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     57c:	0e 94 c1 01 	call	0x382	; 0x382 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     580:	0e 94 0b 02 	call	0x416	; 0x416 <prvCheckDelayedList>
     584:	0a c0       	rjmp	.+20     	; 0x59a <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     586:	80 91 70 00 	lds	r24, 0x0070
     58a:	88 23       	and	r24, r24
     58c:	09 f4       	brne	.+2      	; 0x590 <vCoRoutineSchedule+0x1e>
     58e:	66 c0       	rjmp	.+204    	; 0x65c <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     590:	80 91 70 00 	lds	r24, 0x0070
     594:	81 50       	subi	r24, 0x01	; 1
     596:	80 93 70 00 	sts	0x0070, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     59a:	80 91 70 00 	lds	r24, 0x0070
     59e:	28 2f       	mov	r18, r24
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	c9 01       	movw	r24, r18
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	fc 01       	movw	r30, r24
     5b6:	e9 58       	subi	r30, 0x89	; 137
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	80 81       	ld	r24, Z
     5bc:	88 23       	and	r24, r24
     5be:	19 f3       	breq	.-58     	; 0x586 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     5c0:	80 91 70 00 	lds	r24, 0x0070
     5c4:	28 2f       	mov	r18, r24
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	c9 01       	movw	r24, r18
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	82 0f       	add	r24, r18
     5d8:	93 1f       	adc	r25, r19
     5da:	89 58       	subi	r24, 0x89	; 137
     5dc:	9f 4f       	sbci	r25, 0xFF	; 255
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	e9 81       	ldd	r30, Y+1	; 0x01
     5e4:	fa 81       	ldd	r31, Y+2	; 0x02
     5e6:	01 80       	ldd	r0, Z+1	; 0x01
     5e8:	f2 81       	ldd	r31, Z+2	; 0x02
     5ea:	e0 2d       	mov	r30, r0
     5ec:	82 81       	ldd	r24, Z+2	; 0x02
     5ee:	93 81       	ldd	r25, Z+3	; 0x03
     5f0:	e9 81       	ldd	r30, Y+1	; 0x01
     5f2:	fa 81       	ldd	r31, Y+2	; 0x02
     5f4:	92 83       	std	Z+2, r25	; 0x02
     5f6:	81 83       	std	Z+1, r24	; 0x01
     5f8:	e9 81       	ldd	r30, Y+1	; 0x01
     5fa:	fa 81       	ldd	r31, Y+2	; 0x02
     5fc:	21 81       	ldd	r18, Z+1	; 0x01
     5fe:	32 81       	ldd	r19, Z+2	; 0x02
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	03 96       	adiw	r24, 0x03	; 3
     606:	28 17       	cp	r18, r24
     608:	39 07       	cpc	r19, r25
     60a:	59 f4       	brne	.+22     	; 0x622 <vCoRoutineSchedule+0xb0>
     60c:	e9 81       	ldd	r30, Y+1	; 0x01
     60e:	fa 81       	ldd	r31, Y+2	; 0x02
     610:	01 80       	ldd	r0, Z+1	; 0x01
     612:	f2 81       	ldd	r31, Z+2	; 0x02
     614:	e0 2d       	mov	r30, r0
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	e9 81       	ldd	r30, Y+1	; 0x01
     61c:	fa 81       	ldd	r31, Y+2	; 0x02
     61e:	92 83       	std	Z+2, r25	; 0x02
     620:	81 83       	std	Z+1, r24	; 0x01
     622:	e9 81       	ldd	r30, Y+1	; 0x01
     624:	fa 81       	ldd	r31, Y+2	; 0x02
     626:	01 80       	ldd	r0, Z+1	; 0x01
     628:	f2 81       	ldd	r31, Z+2	; 0x02
     62a:	e0 2d       	mov	r30, r0
     62c:	86 81       	ldd	r24, Z+6	; 0x06
     62e:	97 81       	ldd	r25, Z+7	; 0x07
     630:	90 93 6f 00 	sts	0x006F, r25
     634:	80 93 6e 00 	sts	0x006E, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     638:	e0 91 6e 00 	lds	r30, 0x006E
     63c:	f0 91 6f 00 	lds	r31, 0x006F
     640:	40 81       	ld	r20, Z
     642:	51 81       	ldd	r21, Z+1	; 0x01
     644:	80 91 6e 00 	lds	r24, 0x006E
     648:	90 91 6f 00 	lds	r25, 0x006F
     64c:	e0 91 6e 00 	lds	r30, 0x006E
     650:	f0 91 6f 00 	lds	r31, 0x006F
     654:	27 89       	ldd	r18, Z+23	; 0x17
     656:	62 2f       	mov	r22, r18
     658:	fa 01       	movw	r30, r20
     65a:	09 95       	icall

	return;
}
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	08 95       	ret

00000666 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	0f 92       	push	r0
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     670:	19 82       	std	Y+1, r1	; 0x01
     672:	13 c0       	rjmp	.+38     	; 0x69a <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	28 2f       	mov	r18, r24
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	c9 01       	movw	r24, r18
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	89 58       	subi	r24, 0x89	; 137
     68e:	9f 4f       	sbci	r25, 0xFF	; 255
     690:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	8f 5f       	subi	r24, 0xFF	; 255
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	50 f3       	brcs	.-44     	; 0x674 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     6a0:	89 e8       	ldi	r24, 0x89	; 137
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     6a8:	82 e9       	ldi	r24, 0x92	; 146
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     6b0:	8f e9       	ldi	r24, 0x9F	; 159
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     6b8:	89 e8       	ldi	r24, 0x89	; 137
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	90 93 9c 00 	sts	0x009C, r25
     6c0:	80 93 9b 00 	sts	0x009B, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     6c4:	82 e9       	ldi	r24, 0x92	; 146
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	90 93 9e 00 	sts	0x009E, r25
     6cc:	80 93 9d 00 	sts	0x009D, r24
}
     6d0:	0f 90       	pop	r0
     6d2:	cf 91       	pop	r28
     6d4:	df 91       	pop	r29
     6d6:	08 95       	ret

000006d8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	00 d0       	rcall	.+0      	; 0x6de <xCoRoutineRemoveFromEventList+0x6>
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <xCoRoutineRemoveFromEventList+0x8>
     6e0:	0f 92       	push	r0
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	9d 83       	std	Y+5, r25	; 0x05
     6e8:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     6ea:	ec 81       	ldd	r30, Y+4	; 0x04
     6ec:	fd 81       	ldd	r31, Y+5	; 0x05
     6ee:	05 80       	ldd	r0, Z+5	; 0x05
     6f0:	f6 81       	ldd	r31, Z+6	; 0x06
     6f2:	e0 2d       	mov	r30, r0
     6f4:	86 81       	ldd	r24, Z+6	; 0x06
     6f6:	97 81       	ldd	r25, Z+7	; 0x07
     6f8:	9b 83       	std	Y+3, r25	; 0x03
     6fa:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	9b 81       	ldd	r25, Y+3	; 0x03
     700:	0c 96       	adiw	r24, 0x0c	; 12
     702:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	9b 81       	ldd	r25, Y+3	; 0x03
     70a:	9c 01       	movw	r18, r24
     70c:	24 5f       	subi	r18, 0xF4	; 244
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	8f e9       	ldi	r24, 0x9F	; 159
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	b9 01       	movw	r22, r18
     716:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     71a:	ea 81       	ldd	r30, Y+2	; 0x02
     71c:	fb 81       	ldd	r31, Y+3	; 0x03
     71e:	96 89       	ldd	r25, Z+22	; 0x16
     720:	e0 91 6e 00 	lds	r30, 0x006E
     724:	f0 91 6f 00 	lds	r31, 0x006F
     728:	86 89       	ldd	r24, Z+22	; 0x16
     72a:	98 17       	cp	r25, r24
     72c:	18 f0       	brcs	.+6      	; 0x734 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	01 c0       	rjmp	.+2      	; 0x736 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     734:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     736:	89 81       	ldd	r24, Y+1	; 0x01
}
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	cf 91       	pop	r28
     744:	df 91       	pop	r29
     746:	08 95       	ret

00000748 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     748:	df 93       	push	r29
     74a:	cf 93       	push	r28
     74c:	00 d0       	rcall	.+0      	; 0x74e <pvPortMalloc+0x6>
     74e:	00 d0       	rcall	.+0      	; 0x750 <pvPortMalloc+0x8>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     758:	1a 82       	std	Y+2, r1	; 0x02
     75a:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     75c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     760:	80 91 a8 00 	lds	r24, 0x00A8
     764:	90 91 a9 00 	lds	r25, 0x00A9
     768:	2b 81       	ldd	r18, Y+3	; 0x03
     76a:	3c 81       	ldd	r19, Y+4	; 0x04
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	22 e0       	ldi	r18, 0x02	; 2
     772:	88 35       	cpi	r24, 0x58	; 88
     774:	92 07       	cpc	r25, r18
     776:	18 f5       	brcc	.+70     	; 0x7be <pvPortMalloc+0x76>
     778:	20 91 a8 00 	lds	r18, 0x00A8
     77c:	30 91 a9 00 	lds	r19, 0x00A9
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	9c 81       	ldd	r25, Y+4	; 0x04
     784:	28 0f       	add	r18, r24
     786:	39 1f       	adc	r19, r25
     788:	80 91 a8 00 	lds	r24, 0x00A8
     78c:	90 91 a9 00 	lds	r25, 0x00A9
     790:	82 17       	cp	r24, r18
     792:	93 07       	cpc	r25, r19
     794:	a0 f4       	brcc	.+40     	; 0x7be <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     796:	80 91 a8 00 	lds	r24, 0x00A8
     79a:	90 91 a9 00 	lds	r25, 0x00A9
     79e:	86 55       	subi	r24, 0x56	; 86
     7a0:	9f 4f       	sbci	r25, 0xFF	; 255
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     7a6:	20 91 a8 00 	lds	r18, 0x00A8
     7aa:	30 91 a9 00 	lds	r19, 0x00A9
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	82 0f       	add	r24, r18
     7b4:	93 1f       	adc	r25, r19
     7b6:	90 93 a9 00 	sts	0x00A9, r25
     7ba:	80 93 a8 00 	sts	0x00A8, r24
		}	
	}
	xTaskResumeAll();
     7be:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	cf 91       	pop	r28
     7d0:	df 91       	pop	r29
     7d2:	08 95       	ret

000007d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     7d4:	df 93       	push	r29
     7d6:	cf 93       	push	r28
     7d8:	00 d0       	rcall	.+0      	; 0x7da <vPortFree+0x6>
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	9a 83       	std	Y+2, r25	; 0x02
     7e0:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	cf 91       	pop	r28
     7e8:	df 91       	pop	r29
     7ea:	08 95       	ret

000007ec <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     7ec:	df 93       	push	r29
     7ee:	cf 93       	push	r28
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     7f4:	10 92 a9 00 	sts	0x00A9, r1
     7f8:	10 92 a8 00 	sts	0x00A8, r1
}
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     80a:	20 91 a8 00 	lds	r18, 0x00A8
     80e:	30 91 a9 00 	lds	r19, 0x00A9
     812:	88 e5       	ldi	r24, 0x58	; 88
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	82 1b       	sub	r24, r18
     818:	93 0b       	sbc	r25, r19
}
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	00 d0       	rcall	.+0      	; 0x826 <vListInitialise+0x6>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	9a 83       	std	Y+2, r25	; 0x02
     82c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	03 96       	adiw	r24, 0x03	; 3
     834:	e9 81       	ldd	r30, Y+1	; 0x01
     836:	fa 81       	ldd	r31, Y+2	; 0x02
     838:	92 83       	std	Z+2, r25	; 0x02
     83a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     83c:	e9 81       	ldd	r30, Y+1	; 0x01
     83e:	fa 81       	ldd	r31, Y+2	; 0x02
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	9f ef       	ldi	r25, 0xFF	; 255
     844:	94 83       	std	Z+4, r25	; 0x04
     846:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	03 96       	adiw	r24, 0x03	; 3
     84e:	e9 81       	ldd	r30, Y+1	; 0x01
     850:	fa 81       	ldd	r31, Y+2	; 0x02
     852:	96 83       	std	Z+6, r25	; 0x06
     854:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	03 96       	adiw	r24, 0x03	; 3
     85c:	e9 81       	ldd	r30, Y+1	; 0x01
     85e:	fa 81       	ldd	r31, Y+2	; 0x02
     860:	90 87       	std	Z+8, r25	; 0x08
     862:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     864:	e9 81       	ldd	r30, Y+1	; 0x01
     866:	fa 81       	ldd	r31, Y+2	; 0x02
     868:	10 82       	st	Z, r1
}
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	00 d0       	rcall	.+0      	; 0x87a <vListInitialiseItem+0x6>
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     882:	e9 81       	ldd	r30, Y+1	; 0x01
     884:	fa 81       	ldd	r31, Y+2	; 0x02
     886:	11 86       	std	Z+9, r1	; 0x09
     888:	10 86       	std	Z+8, r1	; 0x08
}
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	08 95       	ret

00000894 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	00 d0       	rcall	.+0      	; 0x89a <vListInsertEnd+0x6>
     89a:	00 d0       	rcall	.+0      	; 0x89c <vListInsertEnd+0x8>
     89c:	00 d0       	rcall	.+0      	; 0x89e <vListInsertEnd+0xa>
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	9c 83       	std	Y+4, r25	; 0x04
     8a4:	8b 83       	std	Y+3, r24	; 0x03
     8a6:	7e 83       	std	Y+6, r23	; 0x06
     8a8:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     8aa:	eb 81       	ldd	r30, Y+3	; 0x03
     8ac:	fc 81       	ldd	r31, Y+4	; 0x04
     8ae:	81 81       	ldd	r24, Z+1	; 0x01
     8b0:	92 81       	ldd	r25, Z+2	; 0x02
     8b2:	9a 83       	std	Y+2, r25	; 0x02
     8b4:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     8b6:	e9 81       	ldd	r30, Y+1	; 0x01
     8b8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	93 81       	ldd	r25, Z+3	; 0x03
     8be:	ed 81       	ldd	r30, Y+5	; 0x05
     8c0:	fe 81       	ldd	r31, Y+6	; 0x06
     8c2:	93 83       	std	Z+3, r25	; 0x03
     8c4:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     8c6:	eb 81       	ldd	r30, Y+3	; 0x03
     8c8:	fc 81       	ldd	r31, Y+4	; 0x04
     8ca:	81 81       	ldd	r24, Z+1	; 0x01
     8cc:	92 81       	ldd	r25, Z+2	; 0x02
     8ce:	ed 81       	ldd	r30, Y+5	; 0x05
     8d0:	fe 81       	ldd	r31, Y+6	; 0x06
     8d2:	95 83       	std	Z+5, r25	; 0x05
     8d4:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	fa 81       	ldd	r31, Y+2	; 0x02
     8da:	02 80       	ldd	r0, Z+2	; 0x02
     8dc:	f3 81       	ldd	r31, Z+3	; 0x03
     8de:	e0 2d       	mov	r30, r0
     8e0:	8d 81       	ldd	r24, Y+5	; 0x05
     8e2:	9e 81       	ldd	r25, Y+6	; 0x06
     8e4:	95 83       	std	Z+5, r25	; 0x05
     8e6:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     8e8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ea:	9e 81       	ldd	r25, Y+6	; 0x06
     8ec:	e9 81       	ldd	r30, Y+1	; 0x01
     8ee:	fa 81       	ldd	r31, Y+2	; 0x02
     8f0:	93 83       	std	Z+3, r25	; 0x03
     8f2:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     8f4:	8d 81       	ldd	r24, Y+5	; 0x05
     8f6:	9e 81       	ldd	r25, Y+6	; 0x06
     8f8:	eb 81       	ldd	r30, Y+3	; 0x03
     8fa:	fc 81       	ldd	r31, Y+4	; 0x04
     8fc:	92 83       	std	Z+2, r25	; 0x02
     8fe:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     900:	ed 81       	ldd	r30, Y+5	; 0x05
     902:	fe 81       	ldd	r31, Y+6	; 0x06
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	91 87       	std	Z+9, r25	; 0x09
     90a:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     90c:	eb 81       	ldd	r30, Y+3	; 0x03
     90e:	fc 81       	ldd	r31, Y+4	; 0x04
     910:	80 81       	ld	r24, Z
     912:	8f 5f       	subi	r24, 0xFF	; 255
     914:	eb 81       	ldd	r30, Y+3	; 0x03
     916:	fc 81       	ldd	r31, Y+4	; 0x04
     918:	80 83       	st	Z, r24
}
     91a:	26 96       	adiw	r28, 0x06	; 6
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	08 95       	ret

0000092c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	28 97       	sbiw	r28, 0x08	; 8
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	9e 83       	std	Y+6, r25	; 0x06
     942:	8d 83       	std	Y+5, r24	; 0x05
     944:	78 87       	std	Y+8, r23	; 0x08
     946:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     948:	ef 81       	ldd	r30, Y+7	; 0x07
     94a:	f8 85       	ldd	r31, Y+8	; 0x08
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	8f 3f       	cpi	r24, 0xFF	; 255
     95c:	92 07       	cpc	r25, r18
     95e:	39 f4       	brne	.+14     	; 0x96e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     960:	ed 81       	ldd	r30, Y+5	; 0x05
     962:	fe 81       	ldd	r31, Y+6	; 0x06
     964:	87 81       	ldd	r24, Z+7	; 0x07
     966:	90 85       	ldd	r25, Z+8	; 0x08
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	8b 83       	std	Y+3, r24	; 0x03
     96c:	18 c0       	rjmp	.+48     	; 0x99e <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     96e:	8d 81       	ldd	r24, Y+5	; 0x05
     970:	9e 81       	ldd	r25, Y+6	; 0x06
     972:	03 96       	adiw	r24, 0x03	; 3
     974:	9c 83       	std	Y+4, r25	; 0x04
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	06 c0       	rjmp	.+12     	; 0x986 <vListInsert+0x5a>
     97a:	eb 81       	ldd	r30, Y+3	; 0x03
     97c:	fc 81       	ldd	r31, Y+4	; 0x04
     97e:	82 81       	ldd	r24, Z+2	; 0x02
     980:	93 81       	ldd	r25, Z+3	; 0x03
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	8b 83       	std	Y+3, r24	; 0x03
     986:	eb 81       	ldd	r30, Y+3	; 0x03
     988:	fc 81       	ldd	r31, Y+4	; 0x04
     98a:	02 80       	ldd	r0, Z+2	; 0x02
     98c:	f3 81       	ldd	r31, Z+3	; 0x03
     98e:	e0 2d       	mov	r30, r0
     990:	20 81       	ld	r18, Z
     992:	31 81       	ldd	r19, Z+1	; 0x01
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	82 17       	cp	r24, r18
     99a:	93 07       	cpc	r25, r19
     99c:	70 f7       	brcc	.-36     	; 0x97a <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     99e:	eb 81       	ldd	r30, Y+3	; 0x03
     9a0:	fc 81       	ldd	r31, Y+4	; 0x04
     9a2:	82 81       	ldd	r24, Z+2	; 0x02
     9a4:	93 81       	ldd	r25, Z+3	; 0x03
     9a6:	ef 81       	ldd	r30, Y+7	; 0x07
     9a8:	f8 85       	ldd	r31, Y+8	; 0x08
     9aa:	93 83       	std	Z+3, r25	; 0x03
     9ac:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     9ae:	ef 81       	ldd	r30, Y+7	; 0x07
     9b0:	f8 85       	ldd	r31, Y+8	; 0x08
     9b2:	02 80       	ldd	r0, Z+2	; 0x02
     9b4:	f3 81       	ldd	r31, Z+3	; 0x03
     9b6:	e0 2d       	mov	r30, r0
     9b8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ba:	98 85       	ldd	r25, Y+8	; 0x08
     9bc:	95 83       	std	Z+5, r25	; 0x05
     9be:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     9c0:	ef 81       	ldd	r30, Y+7	; 0x07
     9c2:	f8 85       	ldd	r31, Y+8	; 0x08
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	95 83       	std	Z+5, r25	; 0x05
     9ca:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     9cc:	8f 81       	ldd	r24, Y+7	; 0x07
     9ce:	98 85       	ldd	r25, Y+8	; 0x08
     9d0:	eb 81       	ldd	r30, Y+3	; 0x03
     9d2:	fc 81       	ldd	r31, Y+4	; 0x04
     9d4:	93 83       	std	Z+3, r25	; 0x03
     9d6:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9d8:	ef 81       	ldd	r30, Y+7	; 0x07
     9da:	f8 85       	ldd	r31, Y+8	; 0x08
     9dc:	8d 81       	ldd	r24, Y+5	; 0x05
     9de:	9e 81       	ldd	r25, Y+6	; 0x06
     9e0:	91 87       	std	Z+9, r25	; 0x09
     9e2:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     9e4:	ed 81       	ldd	r30, Y+5	; 0x05
     9e6:	fe 81       	ldd	r31, Y+6	; 0x06
     9e8:	80 81       	ld	r24, Z
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	ed 81       	ldd	r30, Y+5	; 0x05
     9ee:	fe 81       	ldd	r31, Y+6	; 0x06
     9f0:	80 83       	st	Z, r24
}
     9f2:	28 96       	adiw	r28, 0x08	; 8
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	08 95       	ret

00000a04 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	00 d0       	rcall	.+0      	; 0xa0a <vListRemove+0x6>
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <vListRemove+0x8>
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	9c 83       	std	Y+4, r25	; 0x04
     a12:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a14:	eb 81       	ldd	r30, Y+3	; 0x03
     a16:	fc 81       	ldd	r31, Y+4	; 0x04
     a18:	a2 81       	ldd	r26, Z+2	; 0x02
     a1a:	b3 81       	ldd	r27, Z+3	; 0x03
     a1c:	eb 81       	ldd	r30, Y+3	; 0x03
     a1e:	fc 81       	ldd	r31, Y+4	; 0x04
     a20:	84 81       	ldd	r24, Z+4	; 0x04
     a22:	95 81       	ldd	r25, Z+5	; 0x05
     a24:	15 96       	adiw	r26, 0x05	; 5
     a26:	9c 93       	st	X, r25
     a28:	8e 93       	st	-X, r24
     a2a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a2c:	eb 81       	ldd	r30, Y+3	; 0x03
     a2e:	fc 81       	ldd	r31, Y+4	; 0x04
     a30:	a4 81       	ldd	r26, Z+4	; 0x04
     a32:	b5 81       	ldd	r27, Z+5	; 0x05
     a34:	eb 81       	ldd	r30, Y+3	; 0x03
     a36:	fc 81       	ldd	r31, Y+4	; 0x04
     a38:	82 81       	ldd	r24, Z+2	; 0x02
     a3a:	93 81       	ldd	r25, Z+3	; 0x03
     a3c:	13 96       	adiw	r26, 0x03	; 3
     a3e:	9c 93       	st	X, r25
     a40:	8e 93       	st	-X, r24
     a42:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     a44:	eb 81       	ldd	r30, Y+3	; 0x03
     a46:	fc 81       	ldd	r31, Y+4	; 0x04
     a48:	80 85       	ldd	r24, Z+8	; 0x08
     a4a:	91 85       	ldd	r25, Z+9	; 0x09
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     a50:	e9 81       	ldd	r30, Y+1	; 0x01
     a52:	fa 81       	ldd	r31, Y+2	; 0x02
     a54:	21 81       	ldd	r18, Z+1	; 0x01
     a56:	32 81       	ldd	r19, Z+2	; 0x02
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	28 17       	cp	r18, r24
     a5e:	39 07       	cpc	r19, r25
     a60:	41 f4       	brne	.+16     	; 0xa72 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     a62:	eb 81       	ldd	r30, Y+3	; 0x03
     a64:	fc 81       	ldd	r31, Y+4	; 0x04
     a66:	84 81       	ldd	r24, Z+4	; 0x04
     a68:	95 81       	ldd	r25, Z+5	; 0x05
     a6a:	e9 81       	ldd	r30, Y+1	; 0x01
     a6c:	fa 81       	ldd	r31, Y+2	; 0x02
     a6e:	92 83       	std	Z+2, r25	; 0x02
     a70:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     a72:	eb 81       	ldd	r30, Y+3	; 0x03
     a74:	fc 81       	ldd	r31, Y+4	; 0x04
     a76:	11 86       	std	Z+9, r1	; 0x09
     a78:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     a7a:	e9 81       	ldd	r30, Y+1	; 0x01
     a7c:	fa 81       	ldd	r31, Y+2	; 0x02
     a7e:	80 81       	ld	r24, Z
     a80:	81 50       	subi	r24, 0x01	; 1
     a82:	e9 81       	ldd	r30, Y+1	; 0x01
     a84:	fa 81       	ldd	r31, Y+2	; 0x02
     a86:	80 83       	st	Z, r24
}
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	cf 91       	pop	r28
     a92:	df 91       	pop	r29
     a94:	08 95       	ret

00000a96 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     a96:	df 93       	push	r29
     a98:	cf 93       	push	r28
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	28 97       	sbiw	r28, 0x08	; 8
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	9c 83       	std	Y+4, r25	; 0x04
     aac:	8b 83       	std	Y+3, r24	; 0x03
     aae:	7e 83       	std	Y+6, r23	; 0x06
     ab0:	6d 83       	std	Y+5, r22	; 0x05
     ab2:	58 87       	std	Y+8, r21	; 0x08
     ab4:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     ab6:	eb 81       	ldd	r30, Y+3	; 0x03
     ab8:	fc 81       	ldd	r31, Y+4	; 0x04
     aba:	81 e1       	ldi	r24, 0x11	; 17
     abc:	80 83       	st	Z, r24
	pxTopOfStack--;
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     ac8:	eb 81       	ldd	r30, Y+3	; 0x03
     aca:	fc 81       	ldd	r31, Y+4	; 0x04
     acc:	82 e2       	ldi	r24, 0x22	; 34
     ace:	80 83       	st	Z, r24
	pxTopOfStack--;
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	9c 81       	ldd	r25, Y+4	; 0x04
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	9c 83       	std	Y+4, r25	; 0x04
     ad8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     ada:	eb 81       	ldd	r30, Y+3	; 0x03
     adc:	fc 81       	ldd	r31, Y+4	; 0x04
     ade:	83 e3       	ldi	r24, 0x33	; 51
     ae0:	80 83       	st	Z, r24
	pxTopOfStack--;
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	9c 83       	std	Y+4, r25	; 0x04
     aea:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
     aec:	8d 81       	ldd	r24, Y+5	; 0x05
     aee:	9e 81       	ldd	r25, Y+6	; 0x06
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	eb 81       	ldd	r30, Y+3	; 0x03
     af8:	fc 81       	ldd	r31, Y+4	; 0x04
     afa:	80 83       	st	Z, r24
	pxTopOfStack--;
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	89 2f       	mov	r24, r25
     b0c:	99 27       	eor	r25, r25
     b0e:	9a 83       	std	Y+2, r25	; 0x02
     b10:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	eb 81       	ldd	r30, Y+3	; 0x03
     b16:	fc 81       	ldd	r31, Y+4	; 0x04
     b18:	80 83       	st	Z, r24
	pxTopOfStack--;
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     b24:	eb 81       	ldd	r30, Y+3	; 0x03
     b26:	fc 81       	ldd	r31, Y+4	; 0x04
     b28:	10 82       	st	Z, r1
	pxTopOfStack--;
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	9c 81       	ldd	r25, Y+4	; 0x04
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	9c 83       	std	Y+4, r25	; 0x04
     b32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     b34:	eb 81       	ldd	r30, Y+3	; 0x03
     b36:	fc 81       	ldd	r31, Y+4	; 0x04
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	80 83       	st	Z, r24
	pxTopOfStack--;
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	9c 83       	std	Y+4, r25	; 0x04
     b44:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     b46:	eb 81       	ldd	r30, Y+3	; 0x03
     b48:	fc 81       	ldd	r31, Y+4	; 0x04
     b4a:	10 82       	st	Z, r1
	pxTopOfStack--;
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     b56:	eb 81       	ldd	r30, Y+3	; 0x03
     b58:	fc 81       	ldd	r31, Y+4	; 0x04
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	80 83       	st	Z, r24
	pxTopOfStack--;
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	9c 83       	std	Y+4, r25	; 0x04
     b66:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     b68:	eb 81       	ldd	r30, Y+3	; 0x03
     b6a:	fc 81       	ldd	r31, Y+4	; 0x04
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	80 83       	st	Z, r24
	pxTopOfStack--;
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     b7a:	eb 81       	ldd	r30, Y+3	; 0x03
     b7c:	fc 81       	ldd	r31, Y+4	; 0x04
     b7e:	84 e0       	ldi	r24, 0x04	; 4
     b80:	80 83       	st	Z, r24
	pxTopOfStack--;
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	9c 83       	std	Y+4, r25	; 0x04
     b8a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     b8c:	eb 81       	ldd	r30, Y+3	; 0x03
     b8e:	fc 81       	ldd	r31, Y+4	; 0x04
     b90:	85 e0       	ldi	r24, 0x05	; 5
     b92:	80 83       	st	Z, r24
	pxTopOfStack--;
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	9c 83       	std	Y+4, r25	; 0x04
     b9c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     b9e:	eb 81       	ldd	r30, Y+3	; 0x03
     ba0:	fc 81       	ldd	r31, Y+4	; 0x04
     ba2:	86 e0       	ldi	r24, 0x06	; 6
     ba4:	80 83       	st	Z, r24
	pxTopOfStack--;
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     bb0:	eb 81       	ldd	r30, Y+3	; 0x03
     bb2:	fc 81       	ldd	r31, Y+4	; 0x04
     bb4:	87 e0       	ldi	r24, 0x07	; 7
     bb6:	80 83       	st	Z, r24
	pxTopOfStack--;
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     bc2:	eb 81       	ldd	r30, Y+3	; 0x03
     bc4:	fc 81       	ldd	r31, Y+4	; 0x04
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	80 83       	st	Z, r24
	pxTopOfStack--;
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	9c 83       	std	Y+4, r25	; 0x04
     bd2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     bd4:	eb 81       	ldd	r30, Y+3	; 0x03
     bd6:	fc 81       	ldd	r31, Y+4	; 0x04
     bd8:	89 e0       	ldi	r24, 0x09	; 9
     bda:	80 83       	st	Z, r24
	pxTopOfStack--;
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     be6:	eb 81       	ldd	r30, Y+3	; 0x03
     be8:	fc 81       	ldd	r31, Y+4	; 0x04
     bea:	80 e1       	ldi	r24, 0x10	; 16
     bec:	80 83       	st	Z, r24
	pxTopOfStack--;
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	9c 83       	std	Y+4, r25	; 0x04
     bf6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     bf8:	eb 81       	ldd	r30, Y+3	; 0x03
     bfa:	fc 81       	ldd	r31, Y+4	; 0x04
     bfc:	81 e1       	ldi	r24, 0x11	; 17
     bfe:	80 83       	st	Z, r24
	pxTopOfStack--;
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	9c 83       	std	Y+4, r25	; 0x04
     c08:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     c0a:	eb 81       	ldd	r30, Y+3	; 0x03
     c0c:	fc 81       	ldd	r31, Y+4	; 0x04
     c0e:	82 e1       	ldi	r24, 0x12	; 18
     c10:	80 83       	st	Z, r24
	pxTopOfStack--;
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     c1c:	eb 81       	ldd	r30, Y+3	; 0x03
     c1e:	fc 81       	ldd	r31, Y+4	; 0x04
     c20:	83 e1       	ldi	r24, 0x13	; 19
     c22:	80 83       	st	Z, r24
	pxTopOfStack--;
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     c2e:	eb 81       	ldd	r30, Y+3	; 0x03
     c30:	fc 81       	ldd	r31, Y+4	; 0x04
     c32:	84 e1       	ldi	r24, 0x14	; 20
     c34:	80 83       	st	Z, r24
	pxTopOfStack--;
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     c40:	eb 81       	ldd	r30, Y+3	; 0x03
     c42:	fc 81       	ldd	r31, Y+4	; 0x04
     c44:	85 e1       	ldi	r24, 0x15	; 21
     c46:	80 83       	st	Z, r24
	pxTopOfStack--;
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	9c 81       	ldd	r25, Y+4	; 0x04
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	9c 83       	std	Y+4, r25	; 0x04
     c50:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     c52:	eb 81       	ldd	r30, Y+3	; 0x03
     c54:	fc 81       	ldd	r31, Y+4	; 0x04
     c56:	86 e1       	ldi	r24, 0x16	; 22
     c58:	80 83       	st	Z, r24
	pxTopOfStack--;
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     c64:	eb 81       	ldd	r30, Y+3	; 0x03
     c66:	fc 81       	ldd	r31, Y+4	; 0x04
     c68:	87 e1       	ldi	r24, 0x17	; 23
     c6a:	80 83       	st	Z, r24
	pxTopOfStack--;
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9c 83       	std	Y+4, r25	; 0x04
     c74:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     c76:	eb 81       	ldd	r30, Y+3	; 0x03
     c78:	fc 81       	ldd	r31, Y+4	; 0x04
     c7a:	88 e1       	ldi	r24, 0x18	; 24
     c7c:	80 83       	st	Z, r24
	pxTopOfStack--;
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     c88:	eb 81       	ldd	r30, Y+3	; 0x03
     c8a:	fc 81       	ldd	r31, Y+4	; 0x04
     c8c:	89 e1       	ldi	r24, 0x19	; 25
     c8e:	80 83       	st	Z, r24
	pxTopOfStack--;
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     c9a:	eb 81       	ldd	r30, Y+3	; 0x03
     c9c:	fc 81       	ldd	r31, Y+4	; 0x04
     c9e:	80 e2       	ldi	r24, 0x20	; 32
     ca0:	80 83       	st	Z, r24
	pxTopOfStack--;
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	9c 81       	ldd	r25, Y+4	; 0x04
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	9c 83       	std	Y+4, r25	; 0x04
     caa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     cac:	eb 81       	ldd	r30, Y+3	; 0x03
     cae:	fc 81       	ldd	r31, Y+4	; 0x04
     cb0:	81 e2       	ldi	r24, 0x21	; 33
     cb2:	80 83       	st	Z, r24
	pxTopOfStack--;
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	9c 83       	std	Y+4, r25	; 0x04
     cbc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     cbe:	eb 81       	ldd	r30, Y+3	; 0x03
     cc0:	fc 81       	ldd	r31, Y+4	; 0x04
     cc2:	82 e2       	ldi	r24, 0x22	; 34
     cc4:	80 83       	st	Z, r24
	pxTopOfStack--;
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	9c 83       	std	Y+4, r25	; 0x04
     cce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     cd0:	eb 81       	ldd	r30, Y+3	; 0x03
     cd2:	fc 81       	ldd	r31, Y+4	; 0x04
     cd4:	83 e2       	ldi	r24, 0x23	; 35
     cd6:	80 83       	st	Z, r24
	pxTopOfStack--;
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
     ce2:	8f 81       	ldd	r24, Y+7	; 0x07
     ce4:	98 85       	ldd	r25, Y+8	; 0x08
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	eb 81       	ldd	r30, Y+3	; 0x03
     cee:	fc 81       	ldd	r31, Y+4	; 0x04
     cf0:	80 83       	st	Z, r24
	pxTopOfStack--;
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	9c 83       	std	Y+4, r25	; 0x04
     cfa:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	89 2f       	mov	r24, r25
     d02:	99 27       	eor	r25, r25
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	eb 81       	ldd	r30, Y+3	; 0x03
     d0c:	fc 81       	ldd	r31, Y+4	; 0x04
     d0e:	80 83       	st	Z, r24
	pxTopOfStack--;
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	9c 83       	std	Y+4, r25	; 0x04
     d18:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     d1a:	eb 81       	ldd	r30, Y+3	; 0x03
     d1c:	fc 81       	ldd	r31, Y+4	; 0x04
     d1e:	86 e2       	ldi	r24, 0x26	; 38
     d20:	80 83       	st	Z, r24
	pxTopOfStack--;
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     d2c:	eb 81       	ldd	r30, Y+3	; 0x03
     d2e:	fc 81       	ldd	r31, Y+4	; 0x04
     d30:	87 e2       	ldi	r24, 0x27	; 39
     d32:	80 83       	st	Z, r24
	pxTopOfStack--;
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	9c 81       	ldd	r25, Y+4	; 0x04
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     d3e:	eb 81       	ldd	r30, Y+3	; 0x03
     d40:	fc 81       	ldd	r31, Y+4	; 0x04
     d42:	88 e2       	ldi	r24, 0x28	; 40
     d44:	80 83       	st	Z, r24
	pxTopOfStack--;
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	9c 83       	std	Y+4, r25	; 0x04
     d4e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     d50:	eb 81       	ldd	r30, Y+3	; 0x03
     d52:	fc 81       	ldd	r31, Y+4	; 0x04
     d54:	89 e2       	ldi	r24, 0x29	; 41
     d56:	80 83       	st	Z, r24
	pxTopOfStack--;
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     d62:	eb 81       	ldd	r30, Y+3	; 0x03
     d64:	fc 81       	ldd	r31, Y+4	; 0x04
     d66:	80 e3       	ldi	r24, 0x30	; 48
     d68:	80 83       	st	Z, r24
	pxTopOfStack--;
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     d74:	eb 81       	ldd	r30, Y+3	; 0x03
     d76:	fc 81       	ldd	r31, Y+4	; 0x04
     d78:	81 e3       	ldi	r24, 0x31	; 49
     d7a:	80 83       	st	Z, r24
	pxTopOfStack--;
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
}
     d8a:	28 96       	adiw	r28, 0x08	; 8
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
     da4:	0e 94 be 07 	call	0xf7c	; 0xf7c <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     da8:	a0 91 02 03 	lds	r26, 0x0302
     dac:	b0 91 03 03 	lds	r27, 0x0303
     db0:	cd 91       	ld	r28, X+
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	dd 91       	ld	r29, X+
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	ff 91       	pop	r31
     dba:	ef 91       	pop	r30
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	6f 90       	pop	r6
     dec:	5f 90       	pop	r5
     dee:	4f 90       	pop	r4
     df0:	3f 90       	pop	r3
     df2:	2f 90       	pop	r2
     df4:	1f 90       	pop	r1
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     dfc:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
}
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	0f 92       	push	r0
     e1c:	1f 92       	push	r1
     e1e:	11 24       	eor	r1, r1
     e20:	2f 92       	push	r2
     e22:	3f 92       	push	r3
     e24:	4f 92       	push	r4
     e26:	5f 92       	push	r5
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	a0 91 02 03 	lds	r26, 0x0302
     e60:	b0 91 03 03 	lds	r27, 0x0303
     e64:	0d b6       	in	r0, 0x3d	; 61
     e66:	0d 92       	st	X+, r0
     e68:	0e b6       	in	r0, 0x3e	; 62
     e6a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e6c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e70:	a0 91 02 03 	lds	r26, 0x0302
     e74:	b0 91 03 03 	lds	r27, 0x0303
     e78:	cd 91       	ld	r28, X+
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	dd 91       	ld	r29, X+
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	4f 90       	pop	r4
     eb8:	3f 90       	pop	r3
     eba:	2f 90       	pop	r2
     ebc:	1f 90       	pop	r1
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ec4:	08 95       	ret

00000ec6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	0f 92       	push	r0
     ece:	1f 92       	push	r1
     ed0:	11 24       	eor	r1, r1
     ed2:	2f 92       	push	r2
     ed4:	3f 92       	push	r3
     ed6:	4f 92       	push	r4
     ed8:	5f 92       	push	r5
     eda:	6f 92       	push	r6
     edc:	7f 92       	push	r7
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
     f0e:	a0 91 02 03 	lds	r26, 0x0302
     f12:	b0 91 03 03 	lds	r27, 0x0303
     f16:	0d b6       	in	r0, 0x3d	; 61
     f18:	0d 92       	st	X+, r0
     f1a:	0e b6       	in	r0, 0x3e	; 62
     f1c:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     f1e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <vTaskIncrementTick>
	vTaskSwitchContext();
     f22:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f26:	a0 91 02 03 	lds	r26, 0x0302
     f2a:	b0 91 03 03 	lds	r27, 0x0303
     f2e:	cd 91       	ld	r28, X+
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	dd 91       	ld	r29, X+
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	bf 90       	pop	r11
     f60:	af 90       	pop	r10
     f62:	9f 90       	pop	r9
     f64:	8f 90       	pop	r8
     f66:	7f 90       	pop	r7
     f68:	6f 90       	pop	r6
     f6a:	5f 90       	pop	r5
     f6c:	4f 90       	pop	r4
     f6e:	3f 90       	pop	r3
     f70:	2f 90       	pop	r2
     f72:	1f 90       	pop	r1
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f7a:	08 95       	ret

00000f7c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <prvSetupTimerInterrupt+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <prvSetupTimerInterrupt+0x8>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <prvSetupTimerInterrupt+0xa>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     f8a:	80 e4       	ldi	r24, 0x40	; 64
     f8c:	9f e1       	ldi	r25, 0x1F	; 31
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	9c 83       	std	Y+4, r25	; 0x04
     f96:	ad 83       	std	Y+5, r26	; 0x05
     f98:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	ad 81       	ldd	r26, Y+5	; 0x05
     fa0:	be 81       	ldd	r27, Y+6	; 0x06
     fa2:	68 94       	set
     fa4:	15 f8       	bld	r1, 5
     fa6:	b6 95       	lsr	r27
     fa8:	a7 95       	ror	r26
     faa:	97 95       	ror	r25
     fac:	87 95       	ror	r24
     fae:	16 94       	lsr	r1
     fb0:	d1 f7       	brne	.-12     	; 0xfa6 <prvSetupTimerInterrupt+0x2a>
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	ad 83       	std	Y+5, r26	; 0x05
     fb8:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	ad 81       	ldd	r26, Y+5	; 0x05
     fc0:	be 81       	ldd	r27, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	a1 09       	sbc	r26, r1
     fc6:	b1 09       	sbc	r27, r1
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	ad 83       	std	Y+5, r26	; 0x05
     fce:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	ad 81       	ldd	r26, Y+5	; 0x05
     fda:	be 81       	ldd	r27, Y+6	; 0x06
     fdc:	89 2f       	mov	r24, r25
     fde:	9a 2f       	mov	r25, r26
     fe0:	ab 2f       	mov	r26, r27
     fe2:	bb 27       	eor	r27, r27
     fe4:	8b 83       	std	Y+3, r24	; 0x03
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	ad 83       	std	Y+5, r26	; 0x05
     fea:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
     ff0:	eb e4       	ldi	r30, 0x4B	; 75
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
     ff8:	ea e4       	ldi	r30, 0x4A	; 74
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1000:	8b e0       	ldi	r24, 0x0B	; 11
    1002:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1004:	ee e4       	ldi	r30, 0x4E	; 78
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    100c:	e9 e5       	ldi	r30, 0x59	; 89
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	80 61       	ori	r24, 0x10	; 16
    1018:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    101a:	e9 e5       	ldi	r30, 0x59	; 89
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	80 83       	st	Z, r24
}
    1022:	26 96       	adiw	r28, 0x06	; 6
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    1034:	0e 94 63 07 	call	0xec6	; 0xec6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1038:	18 95       	reti

0000103a <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	28 97       	sbiw	r28, 0x08	; 8
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1052:	1a 82       	std	Y+2, r1	; 0x02
    1054:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	88 23       	and	r24, r24
    105a:	09 f4       	brne	.+2      	; 0x105e <xQueueCreate+0x24>
    105c:	8c c0       	rjmp	.+280    	; 0x1176 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    105e:	8f e1       	ldi	r24, 0x1F	; 31
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 a4 03 	call	0x748	; 0x748 <pvPortMalloc>
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	09 f4       	brne	.+2      	; 0x1074 <xQueueCreate+0x3a>
    1072:	81 c0       	rjmp	.+258    	; 0x1176 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1074:	8f 81       	ldd	r24, Y+7	; 0x07
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	ac 01       	movw	r20, r24
    1082:	24 9f       	mul	r18, r20
    1084:	c0 01       	movw	r24, r0
    1086:	25 9f       	mul	r18, r21
    1088:	90 0d       	add	r25, r0
    108a:	34 9f       	mul	r19, r20
    108c:	90 0d       	add	r25, r0
    108e:	11 24       	eor	r1, r1
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	0e 94 a4 03 	call	0x748	; 0x748 <pvPortMalloc>
    109e:	ed 81       	ldd	r30, Y+5	; 0x05
    10a0:	fe 81       	ldd	r31, Y+6	; 0x06
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    10a6:	ed 81       	ldd	r30, Y+5	; 0x05
    10a8:	fe 81       	ldd	r31, Y+6	; 0x06
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <xQueueCreate+0x7a>
    10b2:	5d c0       	rjmp	.+186    	; 0x116e <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    10b4:	ed 81       	ldd	r30, Y+5	; 0x05
    10b6:	fe 81       	ldd	r31, Y+6	; 0x06
    10b8:	40 81       	ld	r20, Z
    10ba:	51 81       	ldd	r21, Z+1	; 0x01
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	88 85       	ldd	r24, Y+8	; 0x08
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	bc 01       	movw	r22, r24
    10ca:	26 9f       	mul	r18, r22
    10cc:	c0 01       	movw	r24, r0
    10ce:	27 9f       	mul	r18, r23
    10d0:	90 0d       	add	r25, r0
    10d2:	36 9f       	mul	r19, r22
    10d4:	90 0d       	add	r25, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	84 0f       	add	r24, r20
    10da:	95 1f       	adc	r25, r21
    10dc:	ed 81       	ldd	r30, Y+5	; 0x05
    10de:	fe 81       	ldd	r31, Y+6	; 0x06
    10e0:	93 83       	std	Z+3, r25	; 0x03
    10e2:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    10e4:	ed 81       	ldd	r30, Y+5	; 0x05
    10e6:	fe 81       	ldd	r31, Y+6	; 0x06
    10e8:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    10ea:	ed 81       	ldd	r30, Y+5	; 0x05
    10ec:	fe 81       	ldd	r31, Y+6	; 0x06
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	ed 81       	ldd	r30, Y+5	; 0x05
    10f4:	fe 81       	ldd	r31, Y+6	; 0x06
    10f6:	95 83       	std	Z+5, r25	; 0x05
    10f8:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    10fa:	ed 81       	ldd	r30, Y+5	; 0x05
    10fc:	fe 81       	ldd	r31, Y+6	; 0x06
    10fe:	40 81       	ld	r20, Z
    1100:	51 81       	ldd	r21, Z+1	; 0x01
    1102:	8f 81       	ldd	r24, Y+7	; 0x07
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9c 01       	movw	r18, r24
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	30 40       	sbci	r19, 0x00	; 0
    110e:	88 85       	ldd	r24, Y+8	; 0x08
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	bc 01       	movw	r22, r24
    1116:	26 9f       	mul	r18, r22
    1118:	c0 01       	movw	r24, r0
    111a:	27 9f       	mul	r18, r23
    111c:	90 0d       	add	r25, r0
    111e:	36 9f       	mul	r19, r22
    1120:	90 0d       	add	r25, r0
    1122:	11 24       	eor	r1, r1
    1124:	84 0f       	add	r24, r20
    1126:	95 1f       	adc	r25, r21
    1128:	ed 81       	ldd	r30, Y+5	; 0x05
    112a:	fe 81       	ldd	r31, Y+6	; 0x06
    112c:	97 83       	std	Z+7, r25	; 0x07
    112e:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    1130:	ed 81       	ldd	r30, Y+5	; 0x05
    1132:	fe 81       	ldd	r31, Y+6	; 0x06
    1134:	8f 81       	ldd	r24, Y+7	; 0x07
    1136:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1138:	ed 81       	ldd	r30, Y+5	; 0x05
    113a:	fe 81       	ldd	r31, Y+6	; 0x06
    113c:	88 85       	ldd	r24, Y+8	; 0x08
    113e:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    1140:	ed 81       	ldd	r30, Y+5	; 0x05
    1142:	fe 81       	ldd	r31, Y+6	; 0x06
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1148:	ed 81       	ldd	r30, Y+5	; 0x05
    114a:	fe 81       	ldd	r31, Y+6	; 0x06
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	08 96       	adiw	r24, 0x08	; 8
    1156:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	41 96       	adiw	r24, 0x11	; 17
    1160:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
}
    117a:	28 96       	adiw	r28, 0x08	; 8
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	2c 97       	sbiw	r28, 0x0c	; 12
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	9e 83       	std	Y+6, r25	; 0x06
    11a2:	8d 83       	std	Y+5, r24	; 0x05
    11a4:	78 87       	std	Y+8, r23	; 0x08
    11a6:	6f 83       	std	Y+7, r22	; 0x07
    11a8:	5a 87       	std	Y+10, r21	; 0x0a
    11aa:	49 87       	std	Y+9, r20	; 0x09
    11ac:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    11ae:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	92 8d       	ldd	r25, Z+26	; 0x1a
    11bc:	ed 81       	ldd	r30, Y+5	; 0x05
    11be:	fe 81       	ldd	r31, Y+6	; 0x06
    11c0:	83 8d       	ldd	r24, Z+27	; 0x1b
    11c2:	98 17       	cp	r25, r24
    11c4:	d8 f4       	brcc	.+54     	; 0x11fc <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	2f 81       	ldd	r18, Y+7	; 0x07
    11cc:	38 85       	ldd	r19, Y+8	; 0x08
    11ce:	b9 01       	movw	r22, r18
    11d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    11d2:	0e 94 01 0b 	call	0x1602	; 0x1602 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    11d6:	ed 81       	ldd	r30, Y+5	; 0x05
    11d8:	fe 81       	ldd	r31, Y+6	; 0x06
    11da:	81 89       	ldd	r24, Z+17	; 0x11
    11dc:	88 23       	and	r24, r24
    11de:	49 f0       	breq	.+18     	; 0x11f2 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	41 96       	adiw	r24, 0x11	; 17
    11e6:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskRemoveFromEventList>
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	11 f4       	brne	.+4      	; 0x11f2 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    11ee:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	8c 87       	std	Y+12, r24	; 0x0c
    11fa:	5c c0       	rjmp	.+184    	; 0x12b4 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	21 f4       	brne	.+8      	; 0x120c <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1208:	1c 86       	std	Y+12, r1	; 0x0c
    120a:	54 c0       	rjmp	.+168    	; 0x12b4 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	88 23       	and	r24, r24
    1210:	31 f4       	brne	.+12     	; 0x121e <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1212:	ce 01       	movw	r24, r28
    1214:	02 96       	adiw	r24, 0x02	; 2
    1216:	0e 94 7e 11 	call	0x22fc	; 0x22fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1222:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	0f 92       	push	r0
    122c:	ed 81       	ldd	r30, Y+5	; 0x05
    122e:	fe 81       	ldd	r31, Y+6	; 0x06
    1230:	85 8d       	ldd	r24, Z+29	; 0x1d
    1232:	8f 3f       	cpi	r24, 0xFF	; 255
    1234:	19 f4       	brne	.+6      	; 0x123c <xQueueGenericSend+0xb0>
    1236:	ed 81       	ldd	r30, Y+5	; 0x05
    1238:	fe 81       	ldd	r31, Y+6	; 0x06
    123a:	15 8e       	std	Z+29, r1	; 0x1d
    123c:	ed 81       	ldd	r30, Y+5	; 0x05
    123e:	fe 81       	ldd	r31, Y+6	; 0x06
    1240:	86 8d       	ldd	r24, Z+30	; 0x1e
    1242:	8f 3f       	cpi	r24, 0xFF	; 255
    1244:	19 f4       	brne	.+6      	; 0x124c <xQueueGenericSend+0xc0>
    1246:	ed 81       	ldd	r30, Y+5	; 0x05
    1248:	fe 81       	ldd	r31, Y+6	; 0x06
    124a:	16 8e       	std	Z+30, r1	; 0x1e
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1250:	ce 01       	movw	r24, r28
    1252:	02 96       	adiw	r24, 0x02	; 2
    1254:	9e 01       	movw	r18, r28
    1256:	27 5f       	subi	r18, 0xF7	; 247
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	b9 01       	movw	r22, r18
    125c:	0e 94 97 11 	call	0x232e	; 0x232e <xTaskCheckForTimeOut>
    1260:	88 23       	and	r24, r24
    1262:	09 f5       	brne	.+66     	; 0x12a6 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	0e 94 65 0c 	call	0x18ca	; 0x18ca <prvIsQueueFull>
    126c:	88 23       	and	r24, r24
    126e:	a1 f0       	breq	.+40     	; 0x1298 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	08 96       	adiw	r24, 0x08	; 8
    1276:	29 85       	ldd	r18, Y+9	; 0x09
    1278:	3a 85       	ldd	r19, Y+10	; 0x0a
    127a:	b9 01       	movw	r22, r18
    127c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	0e 94 de 0b 	call	0x17bc	; 0x17bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1288:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
    128c:	88 23       	and	r24, r24
    128e:	09 f0       	breq	.+2      	; 0x1292 <xQueueGenericSend+0x106>
    1290:	8f cf       	rjmp	.-226    	; 0x11b0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1292:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
    1296:	8c cf       	rjmp	.-232    	; 0x11b0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	9e 81       	ldd	r25, Y+6	; 0x06
    129c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    12a0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
    12a4:	85 cf       	rjmp	.-246    	; 0x11b0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    12ae:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    12b2:	1c 86       	std	Y+12, r1	; 0x0c
    12b4:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    12b6:	2c 96       	adiw	r28, 0x0c	; 12
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	29 97       	sbiw	r28, 0x09	; 9
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	7e 83       	std	Y+6, r23	; 0x06
    12e2:	6d 83       	std	Y+5, r22	; 0x05
    12e4:	58 87       	std	Y+8, r21	; 0x08
    12e6:	4f 83       	std	Y+7, r20	; 0x07
    12e8:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    12ea:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    12ec:	eb 81       	ldd	r30, Y+3	; 0x03
    12ee:	fc 81       	ldd	r31, Y+4	; 0x04
    12f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    12f2:	eb 81       	ldd	r30, Y+3	; 0x03
    12f4:	fc 81       	ldd	r31, Y+4	; 0x04
    12f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    12f8:	98 17       	cp	r25, r24
    12fa:	40 f5       	brcc	.+80     	; 0x134c <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	2d 81       	ldd	r18, Y+5	; 0x05
    1302:	3e 81       	ldd	r19, Y+6	; 0x06
    1304:	b9 01       	movw	r22, r18
    1306:	49 85       	ldd	r20, Y+9	; 0x09
    1308:	0e 94 01 0b 	call	0x1602	; 0x1602 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    130c:	eb 81       	ldd	r30, Y+3	; 0x03
    130e:	fc 81       	ldd	r31, Y+4	; 0x04
    1310:	86 8d       	ldd	r24, Z+30	; 0x1e
    1312:	8f 3f       	cpi	r24, 0xFF	; 255
    1314:	89 f4       	brne	.+34     	; 0x1338 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1316:	eb 81       	ldd	r30, Y+3	; 0x03
    1318:	fc 81       	ldd	r31, Y+4	; 0x04
    131a:	81 89       	ldd	r24, Z+17	; 0x11
    131c:	88 23       	and	r24, r24
    131e:	99 f0       	breq	.+38     	; 0x1346 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	41 96       	adiw	r24, 0x11	; 17
    1326:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskRemoveFromEventList>
    132a:	88 23       	and	r24, r24
    132c:	61 f0       	breq	.+24     	; 0x1346 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    132e:	ef 81       	ldd	r30, Y+7	; 0x07
    1330:	f8 85       	ldd	r31, Y+8	; 0x08
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 83       	st	Z, r24
    1336:	07 c0       	rjmp	.+14     	; 0x1346 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1338:	eb 81       	ldd	r30, Y+3	; 0x03
    133a:	fc 81       	ldd	r31, Y+4	; 0x04
    133c:	86 8d       	ldd	r24, Z+30	; 0x1e
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	eb 81       	ldd	r30, Y+3	; 0x03
    1342:	fc 81       	ldd	r31, Y+4	; 0x04
    1344:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	01 c0       	rjmp	.+2      	; 0x134e <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    134c:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1350:	29 96       	adiw	r28, 0x09	; 9
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	2e 97       	sbiw	r28, 0x0e	; 14
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	98 87       	std	Y+8, r25	; 0x08
    1378:	8f 83       	std	Y+7, r24	; 0x07
    137a:	7a 87       	std	Y+10, r23	; 0x0a
    137c:	69 87       	std	Y+9, r22	; 0x09
    137e:	5c 87       	std	Y+12, r21	; 0x0c
    1380:	4b 87       	std	Y+11, r20	; 0x0b
    1382:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1384:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    138c:	ef 81       	ldd	r30, Y+7	; 0x07
    138e:	f8 85       	ldd	r31, Y+8	; 0x08
    1390:	82 8d       	ldd	r24, Z+26	; 0x1a
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <xQueueGenericReceive+0x36>
    1396:	3f c0       	rjmp	.+126    	; 0x1416 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1398:	ef 81       	ldd	r30, Y+7	; 0x07
    139a:	f8 85       	ldd	r31, Y+8	; 0x08
    139c:	86 81       	ldd	r24, Z+6	; 0x06
    139e:	97 81       	ldd	r25, Z+7	; 0x07
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 85       	ldd	r25, Y+8	; 0x08
    13a8:	29 85       	ldd	r18, Y+9	; 0x09
    13aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ac:	b9 01       	movw	r22, r18
    13ae:	0e 94 96 0b 	call	0x172c	; 0x172c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	88 23       	and	r24, r24
    13b6:	b1 f4       	brne	.+44     	; 0x13e4 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    13b8:	ef 81       	ldd	r30, Y+7	; 0x07
    13ba:	f8 85       	ldd	r31, Y+8	; 0x08
    13bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    13be:	81 50       	subi	r24, 0x01	; 1
    13c0:	ef 81       	ldd	r30, Y+7	; 0x07
    13c2:	f8 85       	ldd	r31, Y+8	; 0x08
    13c4:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13c6:	ef 81       	ldd	r30, Y+7	; 0x07
    13c8:	f8 85       	ldd	r31, Y+8	; 0x08
    13ca:	80 85       	ldd	r24, Z+8	; 0x08
    13cc:	88 23       	and	r24, r24
    13ce:	f1 f0       	breq	.+60     	; 0x140c <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	08 96       	adiw	r24, 0x08	; 8
    13d6:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskRemoveFromEventList>
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	b9 f4       	brne	.+46     	; 0x140c <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    13de:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    13e4:	ef 81       	ldd	r30, Y+7	; 0x07
    13e6:	f8 85       	ldd	r31, Y+8	; 0x08
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	97 83       	std	Z+7, r25	; 0x07
    13ee:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    13f0:	ef 81       	ldd	r30, Y+7	; 0x07
    13f2:	f8 85       	ldd	r31, Y+8	; 0x08
    13f4:	81 89       	ldd	r24, Z+17	; 0x11
    13f6:	88 23       	and	r24, r24
    13f8:	49 f0       	breq	.+18     	; 0x140c <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13fa:	8f 81       	ldd	r24, Y+7	; 0x07
    13fc:	98 85       	ldd	r25, Y+8	; 0x08
    13fe:	41 96       	adiw	r24, 0x11	; 17
    1400:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskRemoveFromEventList>
    1404:	88 23       	and	r24, r24
    1406:	11 f0       	breq	.+4      	; 0x140c <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1408:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	8e 87       	std	Y+14, r24	; 0x0e
    1414:	5c c0       	rjmp	.+184    	; 0x14ce <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1416:	8b 85       	ldd	r24, Y+11	; 0x0b
    1418:	9c 85       	ldd	r25, Y+12	; 0x0c
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	21 f4       	brne	.+8      	; 0x1426 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1422:	1e 86       	std	Y+14, r1	; 0x0e
    1424:	54 c0       	rjmp	.+168    	; 0x14ce <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 23       	and	r24, r24
    142a:	31 f4       	brne	.+12     	; 0x1438 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    142c:	ce 01       	movw	r24, r28
    142e:	04 96       	adiw	r24, 0x04	; 4
    1430:	0e 94 7e 11 	call	0x22fc	; 0x22fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    143c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	0f 92       	push	r0
    1446:	ef 81       	ldd	r30, Y+7	; 0x07
    1448:	f8 85       	ldd	r31, Y+8	; 0x08
    144a:	85 8d       	ldd	r24, Z+29	; 0x1d
    144c:	8f 3f       	cpi	r24, 0xFF	; 255
    144e:	19 f4       	brne	.+6      	; 0x1456 <xQueueGenericReceive+0xf4>
    1450:	ef 81       	ldd	r30, Y+7	; 0x07
    1452:	f8 85       	ldd	r31, Y+8	; 0x08
    1454:	15 8e       	std	Z+29, r1	; 0x1d
    1456:	ef 81       	ldd	r30, Y+7	; 0x07
    1458:	f8 85       	ldd	r31, Y+8	; 0x08
    145a:	86 8d       	ldd	r24, Z+30	; 0x1e
    145c:	8f 3f       	cpi	r24, 0xFF	; 255
    145e:	19 f4       	brne	.+6      	; 0x1466 <xQueueGenericReceive+0x104>
    1460:	ef 81       	ldd	r30, Y+7	; 0x07
    1462:	f8 85       	ldd	r31, Y+8	; 0x08
    1464:	16 8e       	std	Z+30, r1	; 0x1e
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    146a:	ce 01       	movw	r24, r28
    146c:	04 96       	adiw	r24, 0x04	; 4
    146e:	9e 01       	movw	r18, r28
    1470:	25 5f       	subi	r18, 0xF5	; 245
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	b9 01       	movw	r22, r18
    1476:	0e 94 97 11 	call	0x232e	; 0x232e <xTaskCheckForTimeOut>
    147a:	88 23       	and	r24, r24
    147c:	09 f5       	brne	.+66     	; 0x14c0 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    147e:	8f 81       	ldd	r24, Y+7	; 0x07
    1480:	98 85       	ldd	r25, Y+8	; 0x08
    1482:	0e 94 32 0c 	call	0x1864	; 0x1864 <prvIsQueueEmpty>
    1486:	88 23       	and	r24, r24
    1488:	a1 f0       	breq	.+40     	; 0x14b2 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	41 96       	adiw	r24, 0x11	; 17
    1490:	2b 85       	ldd	r18, Y+11	; 0x0b
    1492:	3c 85       	ldd	r19, Y+12	; 0x0c
    1494:	b9 01       	movw	r22, r18
    1496:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    149a:	8f 81       	ldd	r24, Y+7	; 0x07
    149c:	98 85       	ldd	r25, Y+8	; 0x08
    149e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    14a2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
    14a6:	88 23       	and	r24, r24
    14a8:	09 f0       	breq	.+2      	; 0x14ac <xQueueGenericReceive+0x14a>
    14aa:	6d cf       	rjmp	.-294    	; 0x1386 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    14ac:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
    14b0:	6a cf       	rjmp	.-300    	; 0x1386 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    14b2:	8f 81       	ldd	r24, Y+7	; 0x07
    14b4:	98 85       	ldd	r25, Y+8	; 0x08
    14b6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    14ba:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
    14be:	63 cf       	rjmp	.-314    	; 0x1386 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    14c0:	8f 81       	ldd	r24, Y+7	; 0x07
    14c2:	98 85       	ldd	r25, Y+8	; 0x08
    14c4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    14c8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    14cc:	1e 86       	std	Y+14, r1	; 0x0e
    14ce:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    14d0:	2e 96       	adiw	r28, 0x0e	; 14
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	28 97       	sbiw	r28, 0x08	; 8
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
    14fa:	7e 83       	std	Y+6, r23	; 0x06
    14fc:	6d 83       	std	Y+5, r22	; 0x05
    14fe:	58 87       	std	Y+8, r21	; 0x08
    1500:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1502:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1504:	eb 81       	ldd	r30, Y+3	; 0x03
    1506:	fc 81       	ldd	r31, Y+4	; 0x04
    1508:	82 8d       	ldd	r24, Z+26	; 0x1a
    150a:	88 23       	and	r24, r24
    150c:	71 f1       	breq	.+92     	; 0x156a <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	b9 01       	movw	r22, r18
    1518:	0e 94 96 0b 	call	0x172c	; 0x172c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    151c:	eb 81       	ldd	r30, Y+3	; 0x03
    151e:	fc 81       	ldd	r31, Y+4	; 0x04
    1520:	82 8d       	ldd	r24, Z+26	; 0x1a
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    152a:	eb 81       	ldd	r30, Y+3	; 0x03
    152c:	fc 81       	ldd	r31, Y+4	; 0x04
    152e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1530:	8f 3f       	cpi	r24, 0xFF	; 255
    1532:	89 f4       	brne	.+34     	; 0x1556 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1534:	eb 81       	ldd	r30, Y+3	; 0x03
    1536:	fc 81       	ldd	r31, Y+4	; 0x04
    1538:	80 85       	ldd	r24, Z+8	; 0x08
    153a:	88 23       	and	r24, r24
    153c:	99 f0       	breq	.+38     	; 0x1564 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	08 96       	adiw	r24, 0x08	; 8
    1544:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskRemoveFromEventList>
    1548:	88 23       	and	r24, r24
    154a:	61 f0       	breq	.+24     	; 0x1564 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    154c:	ef 81       	ldd	r30, Y+7	; 0x07
    154e:	f8 85       	ldd	r31, Y+8	; 0x08
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 83       	st	Z, r24
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	85 8d       	ldd	r24, Z+29	; 0x1d
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	01 c0       	rjmp	.+2      	; 0x156c <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    156a:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    156e:	28 96       	adiw	r28, 0x08	; 8
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <uxQueueMessagesWaiting+0x6>
    1586:	0f 92       	push	r0
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	9b 83       	std	Y+3, r25	; 0x03
    158e:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1596:	ea 81       	ldd	r30, Y+2	; 0x02
    1598:	fb 81       	ldd	r31, Y+3	; 0x03
    159a:	82 8d       	ldd	r24, Z+26	; 0x1a
    159c:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <uxQueueMessagesWaitingFromISR+0x6>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	9b 83       	std	Y+3, r25	; 0x03
    15be:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    15c0:	ea 81       	ldd	r30, Y+2	; 0x02
    15c2:	fb 81       	ldd	r31, Y+3	; 0x03
    15c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    15c6:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <vQueueDelete+0x6>
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    15e4:	e9 81       	ldd	r30, Y+1	; 0x01
    15e6:	fa 81       	ldd	r31, Y+2	; 0x02
    15e8:	80 81       	ld	r24, Z
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <vPortFree>
	vPortFree( pxQueue );
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <vPortFree>
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <prvCopyDataToQueue+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <prvCopyDataToQueue+0x8>
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	7c 83       	std	Y+4, r23	; 0x04
    1616:	6b 83       	std	Y+3, r22	; 0x03
    1618:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    161a:	e9 81       	ldd	r30, Y+1	; 0x01
    161c:	fa 81       	ldd	r31, Y+2	; 0x02
    161e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <prvCopyDataToQueue+0x24>
    1624:	74 c0       	rjmp	.+232    	; 0x170e <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	88 23       	and	r24, r24
    162a:	99 f5       	brne	.+102    	; 0x1692 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    162c:	e9 81       	ldd	r30, Y+1	; 0x01
    162e:	fa 81       	ldd	r31, Y+2	; 0x02
    1630:	64 81       	ldd	r22, Z+4	; 0x04
    1632:	75 81       	ldd	r23, Z+5	; 0x05
    1634:	e9 81       	ldd	r30, Y+1	; 0x01
    1636:	fa 81       	ldd	r31, Y+2	; 0x02
    1638:	84 8d       	ldd	r24, Z+28	; 0x1c
    163a:	48 2f       	mov	r20, r24
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	2b 81       	ldd	r18, Y+3	; 0x03
    1640:	3c 81       	ldd	r19, Y+4	; 0x04
    1642:	cb 01       	movw	r24, r22
    1644:	b9 01       	movw	r22, r18
    1646:	0e 94 c0 14 	call	0x2980	; 0x2980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    164a:	e9 81       	ldd	r30, Y+1	; 0x01
    164c:	fa 81       	ldd	r31, Y+2	; 0x02
    164e:	24 81       	ldd	r18, Z+4	; 0x04
    1650:	35 81       	ldd	r19, Z+5	; 0x05
    1652:	e9 81       	ldd	r30, Y+1	; 0x01
    1654:	fa 81       	ldd	r31, Y+2	; 0x02
    1656:	84 8d       	ldd	r24, Z+28	; 0x1c
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	82 0f       	add	r24, r18
    165e:	93 1f       	adc	r25, r19
    1660:	e9 81       	ldd	r30, Y+1	; 0x01
    1662:	fa 81       	ldd	r31, Y+2	; 0x02
    1664:	95 83       	std	Z+5, r25	; 0x05
    1666:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1668:	e9 81       	ldd	r30, Y+1	; 0x01
    166a:	fa 81       	ldd	r31, Y+2	; 0x02
    166c:	24 81       	ldd	r18, Z+4	; 0x04
    166e:	35 81       	ldd	r19, Z+5	; 0x05
    1670:	e9 81       	ldd	r30, Y+1	; 0x01
    1672:	fa 81       	ldd	r31, Y+2	; 0x02
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	28 17       	cp	r18, r24
    167a:	39 07       	cpc	r19, r25
    167c:	08 f4       	brcc	.+2      	; 0x1680 <prvCopyDataToQueue+0x7e>
    167e:	47 c0       	rjmp	.+142    	; 0x170e <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	e9 81       	ldd	r30, Y+1	; 0x01
    168a:	fa 81       	ldd	r31, Y+2	; 0x02
    168c:	95 83       	std	Z+5, r25	; 0x05
    168e:	84 83       	std	Z+4, r24	; 0x04
    1690:	3e c0       	rjmp	.+124    	; 0x170e <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1692:	e9 81       	ldd	r30, Y+1	; 0x01
    1694:	fa 81       	ldd	r31, Y+2	; 0x02
    1696:	66 81       	ldd	r22, Z+6	; 0x06
    1698:	77 81       	ldd	r23, Z+7	; 0x07
    169a:	e9 81       	ldd	r30, Y+1	; 0x01
    169c:	fa 81       	ldd	r31, Y+2	; 0x02
    169e:	84 8d       	ldd	r24, Z+28	; 0x1c
    16a0:	48 2f       	mov	r20, r24
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	cb 01       	movw	r24, r22
    16aa:	b9 01       	movw	r22, r18
    16ac:	0e 94 c0 14 	call	0x2980	; 0x2980 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	26 81       	ldd	r18, Z+6	; 0x06
    16b6:	37 81       	ldd	r19, Z+7	; 0x07
    16b8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ba:	fa 81       	ldd	r31, Y+2	; 0x02
    16bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	90 95       	com	r25
    16c4:	81 95       	neg	r24
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	82 0f       	add	r24, r18
    16ca:	93 1f       	adc	r25, r19
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	97 83       	std	Z+7, r25	; 0x07
    16d2:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    16d4:	e9 81       	ldd	r30, Y+1	; 0x01
    16d6:	fa 81       	ldd	r31, Y+2	; 0x02
    16d8:	26 81       	ldd	r18, Z+6	; 0x06
    16da:	37 81       	ldd	r19, Z+7	; 0x07
    16dc:	e9 81       	ldd	r30, Y+1	; 0x01
    16de:	fa 81       	ldd	r31, Y+2	; 0x02
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	28 17       	cp	r18, r24
    16e6:	39 07       	cpc	r19, r25
    16e8:	90 f4       	brcc	.+36     	; 0x170e <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    16ea:	e9 81       	ldd	r30, Y+1	; 0x01
    16ec:	fa 81       	ldd	r31, Y+2	; 0x02
    16ee:	22 81       	ldd	r18, Z+2	; 0x02
    16f0:	33 81       	ldd	r19, Z+3	; 0x03
    16f2:	e9 81       	ldd	r30, Y+1	; 0x01
    16f4:	fa 81       	ldd	r31, Y+2	; 0x02
    16f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	90 95       	com	r25
    16fe:	81 95       	neg	r24
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	82 0f       	add	r24, r18
    1704:	93 1f       	adc	r25, r19
    1706:	e9 81       	ldd	r30, Y+1	; 0x01
    1708:	fa 81       	ldd	r31, Y+2	; 0x02
    170a:	97 83       	std	Z+7, r25	; 0x07
    170c:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	82 8d       	ldd	r24, Z+26	; 0x1a
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	82 8f       	std	Z+26, r24	; 0x1a
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <prvCopyDataFromQueue+0x6>
    1732:	00 d0       	rcall	.+0      	; 0x1734 <prvCopyDataFromQueue+0x8>
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	7c 83       	std	Y+4, r23	; 0x04
    173e:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1740:	e9 81       	ldd	r30, Y+1	; 0x01
    1742:	fa 81       	ldd	r31, Y+2	; 0x02
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	89 f1       	breq	.+98     	; 0x17ae <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	26 81       	ldd	r18, Z+6	; 0x06
    1752:	37 81       	ldd	r19, Z+7	; 0x07
    1754:	e9 81       	ldd	r30, Y+1	; 0x01
    1756:	fa 81       	ldd	r31, Y+2	; 0x02
    1758:	84 8d       	ldd	r24, Z+28	; 0x1c
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	e9 81       	ldd	r30, Y+1	; 0x01
    1764:	fa 81       	ldd	r31, Y+2	; 0x02
    1766:	97 83       	std	Z+7, r25	; 0x07
    1768:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	26 81       	ldd	r18, Z+6	; 0x06
    1770:	37 81       	ldd	r19, Z+7	; 0x07
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	28 17       	cp	r18, r24
    177c:	39 07       	cpc	r19, r25
    177e:	40 f0       	brcs	.+16     	; 0x1790 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1780:	e9 81       	ldd	r30, Y+1	; 0x01
    1782:	fa 81       	ldd	r31, Y+2	; 0x02
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	97 83       	std	Z+7, r25	; 0x07
    178e:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	46 81       	ldd	r20, Z+6	; 0x06
    1796:	57 81       	ldd	r21, Z+7	; 0x07
    1798:	e9 81       	ldd	r30, Y+1	; 0x01
    179a:	fa 81       	ldd	r31, Y+2	; 0x02
    179c:	84 8d       	ldd	r24, Z+28	; 0x1c
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	ba 01       	movw	r22, r20
    17a8:	a9 01       	movw	r20, r18
    17aa:	0e 94 c0 14 	call	0x2980	; 0x2980 <memcpy>
	}
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <prvUnlockQueue+0x6>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	0f 92       	push	r0
    17d0:	15 c0       	rjmp	.+42     	; 0x17fc <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17d2:	e9 81       	ldd	r30, Y+1	; 0x01
    17d4:	fa 81       	ldd	r31, Y+2	; 0x02
    17d6:	81 89       	ldd	r24, Z+17	; 0x11
    17d8:	88 23       	and	r24, r24
    17da:	a9 f0       	breq	.+42     	; 0x1806 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	41 96       	adiw	r24, 0x11	; 17
    17e2:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskRemoveFromEventList>
    17e6:	88 23       	and	r24, r24
    17e8:	11 f0       	breq	.+4      	; 0x17ee <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    17ea:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    17f4:	81 50       	subi	r24, 0x01	; 1
    17f6:	e9 81       	ldd	r30, Y+1	; 0x01
    17f8:	fa 81       	ldd	r31, Y+2	; 0x02
    17fa:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	86 8d       	ldd	r24, Z+30	; 0x1e
    1802:	18 16       	cp	r1, r24
    1804:	34 f3       	brlt	.-52     	; 0x17d2 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    180e:	0f 90       	pop	r0
    1810:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	0f 92       	push	r0
    1818:	15 c0       	rjmp	.+42     	; 0x1844 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	80 85       	ldd	r24, Z+8	; 0x08
    1820:	88 23       	and	r24, r24
    1822:	a9 f0       	breq	.+42     	; 0x184e <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	08 96       	adiw	r24, 0x08	; 8
    182a:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskRemoveFromEventList>
    182e:	88 23       	and	r24, r24
    1830:	11 f0       	breq	.+4      	; 0x1836 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    1832:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	85 8d       	ldd	r24, Z+29	; 0x1d
    183c:	81 50       	subi	r24, 0x01	; 1
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1844:	e9 81       	ldd	r30, Y+1	; 0x01
    1846:	fa 81       	ldd	r31, Y+2	; 0x02
    1848:	85 8d       	ldd	r24, Z+29	; 0x1d
    184a:	18 16       	cp	r1, r24
    184c:	34 f3       	brlt	.-52     	; 0x181a <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <prvIsQueueEmpty+0x6>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	9b 83       	std	Y+3, r25	; 0x03
    1872:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    187a:	ea 81       	ldd	r30, Y+2	; 0x02
    187c:	fb 81       	ldd	r31, Y+3	; 0x03
    187e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	88 23       	and	r24, r24
    1884:	11 f4       	brne	.+4      	; 0x188a <prvIsQueueEmpty+0x26>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <xQueueIsQueueEmptyFromISR+0x6>
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	9b 83       	std	Y+3, r25	; 0x03
    18aa:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    18ac:	ea 81       	ldd	r30, Y+2	; 0x02
    18ae:	fb 81       	ldd	r31, Y+3	; 0x03
    18b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b2:	19 82       	std	Y+1, r1	; 0x01
    18b4:	88 23       	and	r24, r24
    18b6:	11 f4       	brne	.+4      	; 0x18bc <xQueueIsQueueEmptyFromISR+0x20>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <prvIsQueueFull+0x6>
    18d0:	0f 92       	push	r0
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	9b 83       	std	Y+3, r25	; 0x03
    18d8:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    18e0:	ea 81       	ldd	r30, Y+2	; 0x02
    18e2:	fb 81       	ldd	r31, Y+3	; 0x03
    18e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    18e6:	ea 81       	ldd	r30, Y+2	; 0x02
    18e8:	fb 81       	ldd	r31, Y+3	; 0x03
    18ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    18ec:	19 82       	std	Y+1, r1	; 0x01
    18ee:	98 17       	cp	r25, r24
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <prvIsQueueFull+0x2c>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <xQueueIsQueueFullFromISR+0x6>
    190e:	0f 92       	push	r0
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	9b 83       	std	Y+3, r25	; 0x03
    1916:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1918:	ea 81       	ldd	r30, Y+2	; 0x02
    191a:	fb 81       	ldd	r31, Y+3	; 0x03
    191c:	92 8d       	ldd	r25, Z+26	; 0x1a
    191e:	ea 81       	ldd	r30, Y+2	; 0x02
    1920:	fb 81       	ldd	r31, Y+3	; 0x03
    1922:	83 8d       	ldd	r24, Z+27	; 0x1b
    1924:	19 82       	std	Y+1, r1	; 0x01
    1926:	98 17       	cp	r25, r24
    1928:	11 f4       	brne	.+4      	; 0x192e <xQueueIsQueueFullFromISR+0x26>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	64 97       	sbiw	r28, 0x14	; 20
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	9f 83       	std	Y+7, r25	; 0x07
    1962:	8e 83       	std	Y+6, r24	; 0x06
    1964:	79 87       	std	Y+9, r23	; 0x09
    1966:	68 87       	std	Y+8, r22	; 0x08
    1968:	5b 87       	std	Y+11, r21	; 0x0b
    196a:	4a 87       	std	Y+10, r20	; 0x0a
    196c:	3d 87       	std	Y+13, r19	; 0x0d
    196e:	2c 87       	std	Y+12, r18	; 0x0c
    1970:	0e 87       	std	Y+14, r16	; 0x0e
    1972:	f8 8a       	std	Y+16, r15	; 0x10
    1974:	ef 86       	std	Y+15, r14	; 0x0f
    1976:	da 8a       	std	Y+18, r13	; 0x12
    1978:	c9 8a       	std	Y+17, r12	; 0x11
    197a:	bc 8a       	std	Y+20, r11	; 0x14
    197c:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    197e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1980:	9b 85       	ldd	r25, Y+11	; 0x0b
    1982:	29 89       	ldd	r18, Y+17	; 0x11
    1984:	3a 89       	ldd	r19, Y+18	; 0x12
    1986:	b9 01       	movw	r22, r18
    1988:	0e 94 23 13 	call	0x2646	; 0x2646 <prvAllocateTCBAndStack>
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	09 f4       	brne	.+2      	; 0x199a <xTaskGenericCreate+0x5e>
    1998:	99 c0       	rjmp	.+306    	; 0x1acc <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    199a:	eb 81       	ldd	r30, Y+3	; 0x03
    199c:	fc 81       	ldd	r31, Y+4	; 0x04
    199e:	27 89       	ldd	r18, Z+23	; 0x17
    19a0:	30 8d       	ldd	r19, Z+24	; 0x18
    19a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	28 85       	ldd	r18, Y+8	; 0x08
    19b6:	39 85       	ldd	r19, Y+9	; 0x09
    19b8:	eb 89       	ldd	r30, Y+19	; 0x13
    19ba:	fc 89       	ldd	r31, Y+20	; 0x14
    19bc:	aa 85       	ldd	r26, Y+10	; 0x0a
    19be:	bb 85       	ldd	r27, Y+11	; 0x0b
    19c0:	b9 01       	movw	r22, r18
    19c2:	4e 85       	ldd	r20, Y+14	; 0x0e
    19c4:	9f 01       	movw	r18, r30
    19c6:	8d 01       	movw	r16, r26
    19c8:	0e 94 08 12 	call	0x2410	; 0x2410 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	2e 81       	ldd	r18, Y+6	; 0x06
    19d2:	3f 81       	ldd	r19, Y+7	; 0x07
    19d4:	4c 85       	ldd	r20, Y+12	; 0x0c
    19d6:	5d 85       	ldd	r21, Y+13	; 0x0d
    19d8:	b9 01       	movw	r22, r18
    19da:	0e 94 4b 05 	call	0xa96	; 0xa96 <pxPortInitialiseStack>
    19de:	eb 81       	ldd	r30, Y+3	; 0x03
    19e0:	fc 81       	ldd	r31, Y+4	; 0x04
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	31 f0       	breq	.+12     	; 0x19fa <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    19ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    19f0:	f8 89       	ldd	r31, Y+16	; 0x10
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1a00:	80 91 05 03 	lds	r24, 0x0305
    1a04:	8f 5f       	subi	r24, 0xFF	; 255
    1a06:	80 93 05 03 	sts	0x0305, r24
			if( pxCurrentTCB == NULL )
    1a0a:	80 91 02 03 	lds	r24, 0x0302
    1a0e:	90 91 03 03 	lds	r25, 0x0303
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f4       	brne	.+26     	; 0x1a30 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	90 93 03 03 	sts	0x0303, r25
    1a1e:	80 93 02 03 	sts	0x0302, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1a22:	80 91 05 03 	lds	r24, 0x0305
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	a9 f4       	brne	.+42     	; 0x1a54 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1a2a:	0e 94 5f 12 	call	0x24be	; 0x24be <prvInitialiseTaskLists>
    1a2e:	12 c0       	rjmp	.+36     	; 0x1a54 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1a30:	80 91 0a 03 	lds	r24, 0x030A
    1a34:	88 23       	and	r24, r24
    1a36:	71 f4       	brne	.+28     	; 0x1a54 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1a38:	e0 91 02 03 	lds	r30, 0x0302
    1a3c:	f0 91 03 03 	lds	r31, 0x0303
    1a40:	96 89       	ldd	r25, Z+22	; 0x16
    1a42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a44:	89 17       	cp	r24, r25
    1a46:	30 f0       	brcs	.+12     	; 0x1a54 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	90 93 03 03 	sts	0x0303, r25
    1a50:	80 93 02 03 	sts	0x0302, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1a54:	eb 81       	ldd	r30, Y+3	; 0x03
    1a56:	fc 81       	ldd	r31, Y+4	; 0x04
    1a58:	96 89       	ldd	r25, Z+22	; 0x16
    1a5a:	80 91 08 03 	lds	r24, 0x0308
    1a5e:	89 17       	cp	r24, r25
    1a60:	28 f4       	brcc	.+10     	; 0x1a6c <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1a62:	eb 81       	ldd	r30, Y+3	; 0x03
    1a64:	fc 81       	ldd	r31, Y+4	; 0x04
    1a66:	86 89       	ldd	r24, Z+22	; 0x16
    1a68:	80 93 08 03 	sts	0x0308, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1a6c:	80 91 0f 03 	lds	r24, 0x030F
    1a70:	8f 5f       	subi	r24, 0xFF	; 255
    1a72:	80 93 0f 03 	sts	0x030F, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    1a76:	eb 81       	ldd	r30, Y+3	; 0x03
    1a78:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7a:	96 89       	ldd	r25, Z+22	; 0x16
    1a7c:	80 91 09 03 	lds	r24, 0x0309
    1a80:	89 17       	cp	r24, r25
    1a82:	28 f4       	brcc	.+10     	; 0x1a8e <xTaskGenericCreate+0x152>
    1a84:	eb 81       	ldd	r30, Y+3	; 0x03
    1a86:	fc 81       	ldd	r31, Y+4	; 0x04
    1a88:	86 89       	ldd	r24, Z+22	; 0x16
    1a8a:	80 93 09 03 	sts	0x0309, r24
    1a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a90:	fc 81       	ldd	r31, Y+4	; 0x04
    1a92:	86 89       	ldd	r24, Z+22	; 0x16
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	c9 01       	movw	r24, r18
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	82 0f       	add	r24, r18
    1aa8:	93 1f       	adc	r25, r19
    1aaa:	ac 01       	movw	r20, r24
    1aac:	40 5f       	subi	r20, 0xF0	; 240
    1aae:	5c 4f       	sbci	r21, 0xFC	; 252
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	9c 01       	movw	r18, r24
    1ab6:	2e 5f       	subi	r18, 0xFE	; 254
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	ca 01       	movw	r24, r20
    1abc:	b9 01       	movw	r22, r18
    1abe:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>

			xReturn = pdPASS;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	71 f4       	brne	.+28     	; 0x1af2 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    1ad6:	80 91 0a 03 	lds	r24, 0x030A
    1ada:	88 23       	and	r24, r24
    1adc:	51 f0       	breq	.+20     	; 0x1af2 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1ade:	e0 91 02 03 	lds	r30, 0x0302
    1ae2:	f0 91 03 03 	lds	r31, 0x0303
    1ae6:	96 89       	ldd	r25, Z+22	; 0x16
    1ae8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aea:	98 17       	cp	r25, r24
    1aec:	10 f4       	brcc	.+4      	; 0x1af2 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    1aee:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
			}
		}
	}

	return xReturn;
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1af4:	64 96       	adiw	r28, 0x14	; 20
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	bf 90       	pop	r11
    1b12:	af 90       	pop	r10
    1b14:	08 95       	ret

00001b16 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <vTaskDelete+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <vTaskDelete+0x8>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <vTaskDelete+0xa>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    1b2e:	20 91 02 03 	lds	r18, 0x0302
    1b32:	30 91 03 03 	lds	r19, 0x0303
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	82 17       	cp	r24, r18
    1b3c:	93 07       	cpc	r25, r19
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    1b40:	1c 82       	std	Y+4, r1	; 0x04
    1b42:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	39 f4       	brne	.+14     	; 0x1b5a <vTaskDelete+0x44>
    1b4c:	80 91 02 03 	lds	r24, 0x0302
    1b50:	90 91 03 03 	lds	r25, 0x0303
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <vTaskDelete+0x4c>
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	02 96       	adiw	r24, 0x02	; 2
    1b70:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	84 89       	ldd	r24, Z+20	; 0x14
    1b7a:	95 89       	ldd	r25, Z+21	; 0x15
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	29 f0       	breq	.+10     	; 0x1b8a <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	0c 96       	adiw	r24, 0x0c	; 12
    1b86:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	9c 01       	movw	r18, r24
    1b90:	2e 5f       	subi	r18, 0xFE	; 254
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	8c e5       	ldi	r24, 0x5C	; 92
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	b9 01       	movw	r22, r18
    1b9a:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1b9e:	80 91 04 03 	lds	r24, 0x0304
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	80 93 04 03 	sts	0x0304, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1ba8:	80 91 0f 03 	lds	r24, 0x030F
    1bac:	8f 5f       	subi	r24, 0xFF	; 255
    1bae:	80 93 0f 03 	sts	0x030F, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1bb2:	0f 90       	pop	r0
    1bb4:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1bb6:	80 91 0a 03 	lds	r24, 0x030A
    1bba:	88 23       	and	r24, r24
    1bbc:	31 f0       	breq	.+12     	; 0x1bca <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	11 f4       	brne	.+4      	; 0x1bca <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    1bc6:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
			}
		}
	}
    1bca:	26 96       	adiw	r28, 0x06	; 6
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	28 97       	sbiw	r28, 0x08	; 8
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	78 87       	std	Y+8, r23	; 0x08
    1bf6:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1bf8:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1bfa:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1bfe:	ed 81       	ldd	r30, Y+5	; 0x05
    1c00:	fe 81       	ldd	r31, Y+6	; 0x06
    1c02:	20 81       	ld	r18, Z
    1c04:	31 81       	ldd	r19, Z+1	; 0x01
    1c06:	8f 81       	ldd	r24, Y+7	; 0x07
    1c08:	98 85       	ldd	r25, Y+8	; 0x08
    1c0a:	82 0f       	add	r24, r18
    1c0c:	93 1f       	adc	r25, r19
    1c0e:	9c 83       	std	Y+4, r25	; 0x04
    1c10:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    1c12:	ed 81       	ldd	r30, Y+5	; 0x05
    1c14:	fe 81       	ldd	r31, Y+6	; 0x06
    1c16:	20 81       	ld	r18, Z
    1c18:	31 81       	ldd	r19, Z+1	; 0x01
    1c1a:	80 91 06 03 	lds	r24, 0x0306
    1c1e:	90 91 07 03 	lds	r25, 0x0307
    1c22:	82 17       	cp	r24, r18
    1c24:	93 07       	cpc	r25, r19
    1c26:	a8 f4       	brcc	.+42     	; 0x1c52 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1c28:	ed 81       	ldd	r30, Y+5	; 0x05
    1c2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c2c:	20 81       	ld	r18, Z
    1c2e:	31 81       	ldd	r19, Z+1	; 0x01
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	82 17       	cp	r24, r18
    1c36:	93 07       	cpc	r25, r19
    1c38:	00 f5       	brcc	.+64     	; 0x1c7a <vTaskDelayUntil+0x9e>
    1c3a:	20 91 06 03 	lds	r18, 0x0306
    1c3e:	30 91 07 03 	lds	r19, 0x0307
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	28 17       	cp	r18, r24
    1c48:	39 07       	cpc	r19, r25
    1c4a:	b8 f4       	brcc	.+46     	; 0x1c7a <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1c52:	ed 81       	ldd	r30, Y+5	; 0x05
    1c54:	fe 81       	ldd	r31, Y+6	; 0x06
    1c56:	20 81       	ld	r18, Z
    1c58:	31 81       	ldd	r19, Z+1	; 0x01
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	82 17       	cp	r24, r18
    1c60:	93 07       	cpc	r25, r19
    1c62:	48 f0       	brcs	.+18     	; 0x1c76 <vTaskDelayUntil+0x9a>
    1c64:	20 91 06 03 	lds	r18, 0x0306
    1c68:	30 91 07 03 	lds	r19, 0x0307
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	28 17       	cp	r18, r24
    1c72:	39 07       	cpc	r19, r25
    1c74:	10 f4       	brcc	.+4      	; 0x1c7a <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1c7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	88 23       	and	r24, r24
    1c8a:	59 f0       	breq	.+22     	; 0x1ca2 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1c8c:	80 91 02 03 	lds	r24, 0x0302
    1c90:	90 91 03 03 	lds	r25, 0x0303
    1c94:	02 96       	adiw	r24, 0x02	; 2
    1c96:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1ca2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
    1ca6:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	88 23       	and	r24, r24
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    1cae:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
		}
	}
    1cb2:	28 96       	adiw	r28, 0x08	; 8
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <vTaskDelay+0x6>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <vTaskDelay+0x8>
    1ccc:	0f 92       	push	r0
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	9d 83       	std	Y+5, r25	; 0x05
    1cd4:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1cd6:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	d1 f0       	breq	.+52     	; 0x1d14 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    1ce0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1ce4:	20 91 06 03 	lds	r18, 0x0306
    1ce8:	30 91 07 03 	lds	r19, 0x0307
    1cec:	8c 81       	ldd	r24, Y+4	; 0x04
    1cee:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf0:	82 0f       	add	r24, r18
    1cf2:	93 1f       	adc	r25, r19
    1cf4:	9b 83       	std	Y+3, r25	; 0x03
    1cf6:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1cf8:	80 91 02 03 	lds	r24, 0x0302
    1cfc:	90 91 03 03 	lds	r25, 0x0303
    1d00:	02 96       	adiw	r24, 0x02	; 2
    1d02:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1d0e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>
    1d12:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 23       	and	r24, r24
    1d18:	11 f4       	brne	.+4      	; 0x1d1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    1d1a:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
		}
	}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1d2e:	af 92       	push	r10
    1d30:	bf 92       	push	r11
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1d46:	26 e6       	ldi	r18, 0x66	; 102
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	8e ef       	ldi	r24, 0xFE	; 254
    1d4c:	91 e1       	ldi	r25, 0x11	; 17
    1d4e:	b9 01       	movw	r22, r18
    1d50:	45 e5       	ldi	r20, 0x55	; 85
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	00 e0       	ldi	r16, 0x00	; 0
    1d5a:	ee 24       	eor	r14, r14
    1d5c:	ff 24       	eor	r15, r15
    1d5e:	cc 24       	eor	r12, r12
    1d60:	dd 24       	eor	r13, r13
    1d62:	aa 24       	eor	r10, r10
    1d64:	bb 24       	eor	r11, r11
    1d66:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskGenericCreate>
    1d6a:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	51 f4       	brne	.+20     	; 0x1d86 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1d72:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	80 93 0a 03 	sts	0x030A, r24
		xTickCount = ( portTickType ) 0U;
    1d7a:	10 92 07 03 	sts	0x0307, r1
    1d7e:	10 92 06 03 	sts	0x0306, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1d82:	0e 94 ce 06 	call	0xd9c	; 0xd9c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	08 95       	ret

00001d9c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1da4:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1da6:	10 92 0a 03 	sts	0x030A, r1
	vPortEndScheduler();
    1daa:	0e 94 03 07 	call	0xe06	; 0xe06 <vPortEndScheduler>
}
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1dbc:	80 91 0b 03 	lds	r24, 0x030B
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	80 93 0b 03 	sts	0x030B, r24
}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <xTaskResumeAll+0x6>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <xTaskResumeAll+0x8>
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1dd8:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1de0:	80 91 0b 03 	lds	r24, 0x030B
    1de4:	81 50       	subi	r24, 0x01	; 1
    1de6:	80 93 0b 03 	sts	0x030B, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1dea:	80 91 0b 03 	lds	r24, 0x030B
    1dee:	88 23       	and	r24, r24
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <xTaskResumeAll+0x28>
    1df2:	6c c0       	rjmp	.+216    	; 0x1ecc <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1df4:	80 91 05 03 	lds	r24, 0x0305
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <xTaskResumeAll+0x32>
    1dfc:	67 c0       	rjmp	.+206    	; 0x1ecc <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    1dfe:	19 82       	std	Y+1, r1	; 0x01
    1e00:	41 c0       	rjmp	.+130    	; 0x1e84 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1e02:	e0 91 58 03 	lds	r30, 0x0358
    1e06:	f0 91 59 03 	lds	r31, 0x0359
    1e0a:	86 81       	ldd	r24, Z+6	; 0x06
    1e0c:	97 81       	ldd	r25, Z+7	; 0x07
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	0c 96       	adiw	r24, 0x0c	; 12
    1e18:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	02 96       	adiw	r24, 0x02	; 2
    1e22:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1e26:	eb 81       	ldd	r30, Y+3	; 0x03
    1e28:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2a:	96 89       	ldd	r25, Z+22	; 0x16
    1e2c:	80 91 09 03 	lds	r24, 0x0309
    1e30:	89 17       	cp	r24, r25
    1e32:	28 f4       	brcc	.+10     	; 0x1e3e <xTaskResumeAll+0x72>
    1e34:	eb 81       	ldd	r30, Y+3	; 0x03
    1e36:	fc 81       	ldd	r31, Y+4	; 0x04
    1e38:	86 89       	ldd	r24, Z+22	; 0x16
    1e3a:	80 93 09 03 	sts	0x0309, r24
    1e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e40:	fc 81       	ldd	r31, Y+4	; 0x04
    1e42:	86 89       	ldd	r24, Z+22	; 0x16
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	c9 01       	movw	r24, r18
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	82 0f       	add	r24, r18
    1e58:	93 1f       	adc	r25, r19
    1e5a:	80 5f       	subi	r24, 0xF0	; 240
    1e5c:	9c 4f       	sbci	r25, 0xFC	; 252
    1e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e60:	3c 81       	ldd	r19, Y+4	; 0x04
    1e62:	2e 5f       	subi	r18, 0xFE	; 254
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	b9 01       	movw	r22, r18
    1e68:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e70:	96 89       	ldd	r25, Z+22	; 0x16
    1e72:	e0 91 02 03 	lds	r30, 0x0302
    1e76:	f0 91 03 03 	lds	r31, 0x0303
    1e7a:	86 89       	ldd	r24, Z+22	; 0x16
    1e7c:	98 17       	cp	r25, r24
    1e7e:	10 f0       	brcs	.+4      	; 0x1e84 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1e84:	80 91 53 03 	lds	r24, 0x0353
    1e88:	88 23       	and	r24, r24
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <xTaskResumeAll+0xc2>
    1e8c:	ba cf       	rjmp	.-140    	; 0x1e02 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1e8e:	80 91 0c 03 	lds	r24, 0x030C
    1e92:	88 23       	and	r24, r24
    1e94:	71 f0       	breq	.+28     	; 0x1eb2 <xTaskResumeAll+0xe6>
    1e96:	07 c0       	rjmp	.+14     	; 0x1ea6 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    1e98:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <vTaskIncrementTick>
						--uxMissedTicks;
    1e9c:	80 91 0c 03 	lds	r24, 0x030C
    1ea0:	81 50       	subi	r24, 0x01	; 1
    1ea2:	80 93 0c 03 	sts	0x030C, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1ea6:	80 91 0c 03 	lds	r24, 0x030C
    1eaa:	88 23       	and	r24, r24
    1eac:	a9 f7       	brne	.-22     	; 0x1e98 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	21 f0       	breq	.+8      	; 0x1ec0 <xTaskResumeAll+0xf4>
    1eb8:	80 91 0d 03 	lds	r24, 0x030D
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    1ec4:	10 92 0d 03 	sts	0x030D, r1
					portYIELD_WITHIN_API();
    1ec8:	0e 94 0a 07 	call	0xe14	; 0xe14 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <xTaskGetTickCount+0x6>
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1ef0:	80 91 06 03 	lds	r24, 0x0306
    1ef4:	90 91 07 03 	lds	r25, 0x0307
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    1efc:	0f 90       	pop	r0
    1efe:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <xTaskGetTickCountFromISR+0x6>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1f1a:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    1f1c:	80 91 06 03 	lds	r24, 0x0306
    1f20:	90 91 07 03 	lds	r25, 0x0307
    1f24:	9b 83       	std	Y+3, r25	; 0x03
    1f26:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    1f40:	80 91 05 03 	lds	r24, 0x0305
}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <vTaskIncrementTick+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <vTaskIncrementTick+0x8>
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <vTaskIncrementTick+0xa>
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1f58:	80 91 0b 03 	lds	r24, 0x030B
    1f5c:	88 23       	and	r24, r24
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <vTaskIncrementTick+0x18>
    1f60:	bb c0       	rjmp	.+374    	; 0x20d8 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    1f62:	80 91 06 03 	lds	r24, 0x0306
    1f66:	90 91 07 03 	lds	r25, 0x0307
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	90 93 07 03 	sts	0x0307, r25
    1f70:	80 93 06 03 	sts	0x0306, r24
		if( xTickCount == ( portTickType ) 0U )
    1f74:	80 91 06 03 	lds	r24, 0x0306
    1f78:	90 91 07 03 	lds	r25, 0x0307
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	d1 f5       	brne	.+116    	; 0x1ff4 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    1f80:	80 91 4f 03 	lds	r24, 0x034F
    1f84:	90 91 50 03 	lds	r25, 0x0350
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    1f8c:	80 91 51 03 	lds	r24, 0x0351
    1f90:	90 91 52 03 	lds	r25, 0x0352
    1f94:	90 93 50 03 	sts	0x0350, r25
    1f98:	80 93 4f 03 	sts	0x034F, r24
			pxOverflowDelayedTaskList = pxTemp;
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	90 93 52 03 	sts	0x0352, r25
    1fa4:	80 93 51 03 	sts	0x0351, r24
			xNumOfOverflows++;
    1fa8:	80 91 0e 03 	lds	r24, 0x030E
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	80 93 0e 03 	sts	0x030E, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1fb2:	e0 91 4f 03 	lds	r30, 0x034F
    1fb6:	f0 91 50 03 	lds	r31, 0x0350
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 23       	and	r24, r24
    1fbe:	39 f4       	brne	.+14     	; 0x1fce <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	9f ef       	ldi	r25, 0xFF	; 255
    1fc4:	90 93 6c 00 	sts	0x006C, r25
    1fc8:	80 93 6b 00 	sts	0x006B, r24
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1fce:	e0 91 4f 03 	lds	r30, 0x034F
    1fd2:	f0 91 50 03 	lds	r31, 0x0350
    1fd6:	05 80       	ldd	r0, Z+5	; 0x05
    1fd8:	f6 81       	ldd	r31, Z+6	; 0x06
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	86 81       	ldd	r24, Z+6	; 0x06
    1fde:	97 81       	ldd	r25, Z+7	; 0x07
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1fe4:	ed 81       	ldd	r30, Y+5	; 0x05
    1fe6:	fe 81       	ldd	r31, Y+6	; 0x06
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	90 93 6c 00 	sts	0x006C, r25
    1ff0:	80 93 6b 00 	sts	0x006B, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1ff4:	20 91 06 03 	lds	r18, 0x0306
    1ff8:	30 91 07 03 	lds	r19, 0x0307
    1ffc:	80 91 6b 00 	lds	r24, 0x006B
    2000:	90 91 6c 00 	lds	r25, 0x006C
    2004:	28 17       	cp	r18, r24
    2006:	39 07       	cpc	r19, r25
    2008:	08 f4       	brcc	.+2      	; 0x200c <vTaskIncrementTick+0xc2>
    200a:	6b c0       	rjmp	.+214    	; 0x20e2 <vTaskIncrementTick+0x198>
    200c:	e0 91 4f 03 	lds	r30, 0x034F
    2010:	f0 91 50 03 	lds	r31, 0x0350
    2014:	80 81       	ld	r24, Z
    2016:	88 23       	and	r24, r24
    2018:	39 f4       	brne	.+14     	; 0x2028 <vTaskIncrementTick+0xde>
    201a:	8f ef       	ldi	r24, 0xFF	; 255
    201c:	9f ef       	ldi	r25, 0xFF	; 255
    201e:	90 93 6c 00 	sts	0x006C, r25
    2022:	80 93 6b 00 	sts	0x006B, r24
    2026:	5d c0       	rjmp	.+186    	; 0x20e2 <vTaskIncrementTick+0x198>
    2028:	e0 91 4f 03 	lds	r30, 0x034F
    202c:	f0 91 50 03 	lds	r31, 0x0350
    2030:	05 80       	ldd	r0, Z+5	; 0x05
    2032:	f6 81       	ldd	r31, Z+6	; 0x06
    2034:	e0 2d       	mov	r30, r0
    2036:	86 81       	ldd	r24, Z+6	; 0x06
    2038:	97 81       	ldd	r25, Z+7	; 0x07
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	ed 81       	ldd	r30, Y+5	; 0x05
    2040:	fe 81       	ldd	r31, Y+6	; 0x06
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	20 91 06 03 	lds	r18, 0x0306
    204e:	30 91 07 03 	lds	r19, 0x0307
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	28 17       	cp	r18, r24
    2058:	39 07       	cpc	r19, r25
    205a:	38 f4       	brcc	.+14     	; 0x206a <vTaskIncrementTick+0x120>
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	90 93 6c 00 	sts	0x006C, r25
    2064:	80 93 6b 00 	sts	0x006B, r24
    2068:	3c c0       	rjmp	.+120    	; 0x20e2 <vTaskIncrementTick+0x198>
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	02 96       	adiw	r24, 0x02	; 2
    2070:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
    2074:	ed 81       	ldd	r30, Y+5	; 0x05
    2076:	fe 81       	ldd	r31, Y+6	; 0x06
    2078:	84 89       	ldd	r24, Z+20	; 0x14
    207a:	95 89       	ldd	r25, Z+21	; 0x15
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	29 f0       	breq	.+10     	; 0x208a <vTaskIncrementTick+0x140>
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	0c 96       	adiw	r24, 0x0c	; 12
    2086:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
    208a:	ed 81       	ldd	r30, Y+5	; 0x05
    208c:	fe 81       	ldd	r31, Y+6	; 0x06
    208e:	96 89       	ldd	r25, Z+22	; 0x16
    2090:	80 91 09 03 	lds	r24, 0x0309
    2094:	89 17       	cp	r24, r25
    2096:	28 f4       	brcc	.+10     	; 0x20a2 <vTaskIncrementTick+0x158>
    2098:	ed 81       	ldd	r30, Y+5	; 0x05
    209a:	fe 81       	ldd	r31, Y+6	; 0x06
    209c:	86 89       	ldd	r24, Z+22	; 0x16
    209e:	80 93 09 03 	sts	0x0309, r24
    20a2:	ed 81       	ldd	r30, Y+5	; 0x05
    20a4:	fe 81       	ldd	r31, Y+6	; 0x06
    20a6:	86 89       	ldd	r24, Z+22	; 0x16
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	c9 01       	movw	r24, r18
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	82 0f       	add	r24, r18
    20bc:	93 1f       	adc	r25, r19
    20be:	ac 01       	movw	r20, r24
    20c0:	40 5f       	subi	r20, 0xF0	; 240
    20c2:	5c 4f       	sbci	r21, 0xFC	; 252
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	9c 01       	movw	r18, r24
    20ca:	2e 5f       	subi	r18, 0xFE	; 254
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
    20ce:	ca 01       	movw	r24, r20
    20d0:	b9 01       	movw	r22, r18
    20d2:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>
    20d6:	9a cf       	rjmp	.-204    	; 0x200c <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    20d8:	80 91 0c 03 	lds	r24, 0x030C
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	80 93 0c 03 	sts	0x030C, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    20e2:	26 96       	adiw	r28, 0x06	; 6
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <vTaskSwitchContext+0x6>
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    20fe:	80 91 0b 03 	lds	r24, 0x030B
    2102:	88 23       	and	r24, r24
    2104:	49 f0       	breq	.+18     	; 0x2118 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	80 93 0d 03 	sts	0x030D, r24
    210c:	54 c0       	rjmp	.+168    	; 0x21b6 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    210e:	80 91 09 03 	lds	r24, 0x0309
    2112:	81 50       	subi	r24, 0x01	; 1
    2114:	80 93 09 03 	sts	0x0309, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2118:	80 91 09 03 	lds	r24, 0x0309
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	c9 01       	movw	r24, r18
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	fc 01       	movw	r30, r24
    2134:	e0 5f       	subi	r30, 0xF0	; 240
    2136:	fc 4f       	sbci	r31, 0xFC	; 252
    2138:	80 81       	ld	r24, Z
    213a:	88 23       	and	r24, r24
    213c:	41 f3       	breq	.-48     	; 0x210e <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    213e:	80 91 09 03 	lds	r24, 0x0309
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	c9 01       	movw	r24, r18
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	82 0f       	add	r24, r18
    2156:	93 1f       	adc	r25, r19
    2158:	80 5f       	subi	r24, 0xF0	; 240
    215a:	9c 4f       	sbci	r25, 0xFC	; 252
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	01 80       	ldd	r0, Z+1	; 0x01
    2166:	f2 81       	ldd	r31, Z+2	; 0x02
    2168:	e0 2d       	mov	r30, r0
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	e9 81       	ldd	r30, Y+1	; 0x01
    2170:	fa 81       	ldd	r31, Y+2	; 0x02
    2172:	92 83       	std	Z+2, r25	; 0x02
    2174:	81 83       	std	Z+1, r24	; 0x01
    2176:	e9 81       	ldd	r30, Y+1	; 0x01
    2178:	fa 81       	ldd	r31, Y+2	; 0x02
    217a:	21 81       	ldd	r18, Z+1	; 0x01
    217c:	32 81       	ldd	r19, Z+2	; 0x02
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	03 96       	adiw	r24, 0x03	; 3
    2184:	28 17       	cp	r18, r24
    2186:	39 07       	cpc	r19, r25
    2188:	59 f4       	brne	.+22     	; 0x21a0 <vTaskSwitchContext+0xac>
    218a:	e9 81       	ldd	r30, Y+1	; 0x01
    218c:	fa 81       	ldd	r31, Y+2	; 0x02
    218e:	01 80       	ldd	r0, Z+1	; 0x01
    2190:	f2 81       	ldd	r31, Z+2	; 0x02
    2192:	e0 2d       	mov	r30, r0
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	e9 81       	ldd	r30, Y+1	; 0x01
    219a:	fa 81       	ldd	r31, Y+2	; 0x02
    219c:	92 83       	std	Z+2, r25	; 0x02
    219e:	81 83       	std	Z+1, r24	; 0x01
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	01 80       	ldd	r0, Z+1	; 0x01
    21a6:	f2 81       	ldd	r31, Z+2	; 0x02
    21a8:	e0 2d       	mov	r30, r0
    21aa:	86 81       	ldd	r24, Z+6	; 0x06
    21ac:	97 81       	ldd	r25, Z+7	; 0x07
    21ae:	90 93 03 03 	sts	0x0303, r25
    21b2:	80 93 02 03 	sts	0x0302, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <vTaskPlaceOnEventList+0x6>
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <vTaskPlaceOnEventList+0x8>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <vTaskPlaceOnEventList+0xa>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
    21d2:	7e 83       	std	Y+6, r23	; 0x06
    21d4:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    21d6:	4b 81       	ldd	r20, Y+3	; 0x03
    21d8:	5c 81       	ldd	r21, Y+4	; 0x04
    21da:	80 91 02 03 	lds	r24, 0x0302
    21de:	90 91 03 03 	lds	r25, 0x0303
    21e2:	9c 01       	movw	r18, r24
    21e4:	24 5f       	subi	r18, 0xF4	; 244
    21e6:	3f 4f       	sbci	r19, 0xFF	; 255
    21e8:	ca 01       	movw	r24, r20
    21ea:	b9 01       	movw	r22, r18
    21ec:	0e 94 96 04 	call	0x92c	; 0x92c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    21f0:	80 91 02 03 	lds	r24, 0x0302
    21f4:	90 91 03 03 	lds	r25, 0x0303
    21f8:	02 96       	adiw	r24, 0x02	; 2
    21fa:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    21fe:	20 91 06 03 	lds	r18, 0x0306
    2202:	30 91 07 03 	lds	r19, 0x0307
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	82 0f       	add	r24, r18
    220c:	93 1f       	adc	r25, r19
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	0e 94 da 12 	call	0x25b4	; 0x25b4 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    221a:	26 96       	adiw	r28, 0x06	; 6
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <xTaskRemoveFromEventList+0x6>
    2232:	00 d0       	rcall	.+0      	; 0x2234 <xTaskRemoveFromEventList+0x8>
    2234:	0f 92       	push	r0
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9d 83       	std	Y+5, r25	; 0x05
    223c:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    223e:	ec 81       	ldd	r30, Y+4	; 0x04
    2240:	fd 81       	ldd	r31, Y+5	; 0x05
    2242:	05 80       	ldd	r0, Z+5	; 0x05
    2244:	f6 81       	ldd	r31, Z+6	; 0x06
    2246:	e0 2d       	mov	r30, r0
    2248:	86 81       	ldd	r24, Z+6	; 0x06
    224a:	97 81       	ldd	r25, Z+7	; 0x07
    224c:	9b 83       	std	Y+3, r25	; 0x03
    224e:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	0c 96       	adiw	r24, 0x0c	; 12
    2256:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    225a:	80 91 0b 03 	lds	r24, 0x030B
    225e:	88 23       	and	r24, r24
    2260:	61 f5       	brne	.+88     	; 0x22ba <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	02 96       	adiw	r24, 0x02	; 2
    2268:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    226c:	ea 81       	ldd	r30, Y+2	; 0x02
    226e:	fb 81       	ldd	r31, Y+3	; 0x03
    2270:	96 89       	ldd	r25, Z+22	; 0x16
    2272:	80 91 09 03 	lds	r24, 0x0309
    2276:	89 17       	cp	r24, r25
    2278:	28 f4       	brcc	.+10     	; 0x2284 <xTaskRemoveFromEventList+0x58>
    227a:	ea 81       	ldd	r30, Y+2	; 0x02
    227c:	fb 81       	ldd	r31, Y+3	; 0x03
    227e:	86 89       	ldd	r24, Z+22	; 0x16
    2280:	80 93 09 03 	sts	0x0309, r24
    2284:	ea 81       	ldd	r30, Y+2	; 0x02
    2286:	fb 81       	ldd	r31, Y+3	; 0x03
    2288:	86 89       	ldd	r24, Z+22	; 0x16
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	c9 01       	movw	r24, r18
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	82 0f       	add	r24, r18
    229e:	93 1f       	adc	r25, r19
    22a0:	ac 01       	movw	r20, r24
    22a2:	40 5f       	subi	r20, 0xF0	; 240
    22a4:	5c 4f       	sbci	r21, 0xFC	; 252
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	9b 81       	ldd	r25, Y+3	; 0x03
    22aa:	9c 01       	movw	r18, r24
    22ac:	2e 5f       	subi	r18, 0xFE	; 254
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	ca 01       	movw	r24, r20
    22b2:	b9 01       	movw	r22, r18
    22b4:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>
    22b8:	0a c0       	rjmp	.+20     	; 0x22ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	9b 81       	ldd	r25, Y+3	; 0x03
    22be:	9c 01       	movw	r18, r24
    22c0:	24 5f       	subi	r18, 0xF4	; 244
    22c2:	3f 4f       	sbci	r19, 0xFF	; 255
    22c4:	83 e5       	ldi	r24, 0x53	; 83
    22c6:	93 e0       	ldi	r25, 0x03	; 3
    22c8:	b9 01       	movw	r22, r18
    22ca:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    22ce:	ea 81       	ldd	r30, Y+2	; 0x02
    22d0:	fb 81       	ldd	r31, Y+3	; 0x03
    22d2:	96 89       	ldd	r25, Z+22	; 0x16
    22d4:	e0 91 02 03 	lds	r30, 0x0302
    22d8:	f0 91 03 03 	lds	r31, 0x0303
    22dc:	86 89       	ldd	r24, Z+22	; 0x16
    22de:	98 17       	cp	r25, r24
    22e0:	18 f0       	brcs	.+6      	; 0x22e8 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	01 c0       	rjmp	.+2      	; 0x22ea <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    22e8:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <vTaskSetTimeOutState+0x6>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    230a:	80 91 0e 03 	lds	r24, 0x030E
    230e:	e9 81       	ldd	r30, Y+1	; 0x01
    2310:	fa 81       	ldd	r31, Y+2	; 0x02
    2312:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2314:	80 91 06 03 	lds	r24, 0x0306
    2318:	90 91 07 03 	lds	r25, 0x0307
    231c:	e9 81       	ldd	r30, Y+1	; 0x01
    231e:	fa 81       	ldd	r31, Y+2	; 0x02
    2320:	92 83       	std	Z+2, r25	; 0x02
    2322:	81 83       	std	Z+1, r24	; 0x01
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <xTaskCheckForTimeOut+0x6>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <xTaskCheckForTimeOut+0x8>
    2336:	0f 92       	push	r0
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	9b 83       	std	Y+3, r25	; 0x03
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	7d 83       	std	Y+5, r23	; 0x05
    2342:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    234a:	ea 81       	ldd	r30, Y+2	; 0x02
    234c:	fb 81       	ldd	r31, Y+3	; 0x03
    234e:	90 81       	ld	r25, Z
    2350:	80 91 0e 03 	lds	r24, 0x030E
    2354:	98 17       	cp	r25, r24
    2356:	71 f0       	breq	.+28     	; 0x2374 <xTaskCheckForTimeOut+0x46>
    2358:	ea 81       	ldd	r30, Y+2	; 0x02
    235a:	fb 81       	ldd	r31, Y+3	; 0x03
    235c:	21 81       	ldd	r18, Z+1	; 0x01
    235e:	32 81       	ldd	r19, Z+2	; 0x02
    2360:	80 91 06 03 	lds	r24, 0x0306
    2364:	90 91 07 03 	lds	r25, 0x0307
    2368:	82 17       	cp	r24, r18
    236a:	93 07       	cpc	r25, r19
    236c:	18 f0       	brcs	.+6      	; 0x2374 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	2f c0       	rjmp	.+94     	; 0x23d2 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2374:	20 91 06 03 	lds	r18, 0x0306
    2378:	30 91 07 03 	lds	r19, 0x0307
    237c:	ea 81       	ldd	r30, Y+2	; 0x02
    237e:	fb 81       	ldd	r31, Y+3	; 0x03
    2380:	81 81       	ldd	r24, Z+1	; 0x01
    2382:	92 81       	ldd	r25, Z+2	; 0x02
    2384:	28 1b       	sub	r18, r24
    2386:	39 0b       	sbc	r19, r25
    2388:	ec 81       	ldd	r30, Y+4	; 0x04
    238a:	fd 81       	ldd	r31, Y+5	; 0x05
    238c:	80 81       	ld	r24, Z
    238e:	91 81       	ldd	r25, Z+1	; 0x01
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	e0 f4       	brcc	.+56     	; 0x23ce <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2396:	ec 81       	ldd	r30, Y+4	; 0x04
    2398:	fd 81       	ldd	r31, Y+5	; 0x05
    239a:	40 81       	ld	r20, Z
    239c:	51 81       	ldd	r21, Z+1	; 0x01
    239e:	ea 81       	ldd	r30, Y+2	; 0x02
    23a0:	fb 81       	ldd	r31, Y+3	; 0x03
    23a2:	21 81       	ldd	r18, Z+1	; 0x01
    23a4:	32 81       	ldd	r19, Z+2	; 0x02
    23a6:	80 91 06 03 	lds	r24, 0x0306
    23aa:	90 91 07 03 	lds	r25, 0x0307
    23ae:	b9 01       	movw	r22, r18
    23b0:	68 1b       	sub	r22, r24
    23b2:	79 0b       	sbc	r23, r25
    23b4:	cb 01       	movw	r24, r22
    23b6:	84 0f       	add	r24, r20
    23b8:	95 1f       	adc	r25, r21
    23ba:	ec 81       	ldd	r30, Y+4	; 0x04
    23bc:	fd 81       	ldd	r31, Y+5	; 0x05
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	9b 81       	ldd	r25, Y+3	; 0x03
    23c6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    23d2:	0f 90       	pop	r0
    23d4:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	80 93 0d 03 	sts	0x030D, r24
}
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	00 d0       	rcall	.+0      	; 0x2402 <prvIdleTask+0x6>
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	9a 83       	std	Y+2, r25	; 0x02
    2408:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    240a:	0e 94 9c 12 	call	0x2538	; 0x2538 <prvCheckTasksWaitingTermination>
    240e:	fd cf       	rjmp	.-6      	; 0x240a <prvIdleTask+0xe>

00002410 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	29 97       	sbiw	r28, 0x09	; 9
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	7c 83       	std	Y+4, r23	; 0x04
    242e:	6b 83       	std	Y+3, r22	; 0x03
    2430:	4d 83       	std	Y+5, r20	; 0x05
    2432:	3f 83       	std	Y+7, r19	; 0x07
    2434:	2e 83       	std	Y+6, r18	; 0x06
    2436:	19 87       	std	Y+9, r17	; 0x09
    2438:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	49 96       	adiw	r24, 0x19	; 25
    2440:	2b 81       	ldd	r18, Y+3	; 0x03
    2442:	3c 81       	ldd	r19, Y+4	; 0x04
    2444:	b9 01       	movw	r22, r18
    2446:	48 e0       	ldi	r20, 0x08	; 8
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    244e:	e9 81       	ldd	r30, Y+1	; 0x01
    2450:	fa 81       	ldd	r31, Y+2	; 0x02
    2452:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	85 30       	cpi	r24, 0x05	; 5
    2458:	10 f0       	brcs	.+4      	; 0x245e <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    245a:	84 e0       	ldi	r24, 0x04	; 4
    245c:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    245e:	e9 81       	ldd	r30, Y+1	; 0x01
    2460:	fa 81       	ldd	r31, Y+2	; 0x02
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	02 96       	adiw	r24, 0x02	; 2
    246c:	0e 94 3a 04 	call	0x874	; 0x874 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	0c 96       	adiw	r24, 0x0c	; 12
    2476:	0e 94 3a 04 	call	0x874	; 0x874 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    247a:	e9 81       	ldd	r30, Y+1	; 0x01
    247c:	fa 81       	ldd	r31, Y+2	; 0x02
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	91 87       	std	Z+9, r25	; 0x09
    2484:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	85 e0       	ldi	r24, 0x05	; 5
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	82 1b       	sub	r24, r18
    2492:	93 0b       	sbc	r25, r19
    2494:	e9 81       	ldd	r30, Y+1	; 0x01
    2496:	fa 81       	ldd	r31, Y+2	; 0x02
    2498:	95 87       	std	Z+13, r25	; 0x0d
    249a:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    249c:	e9 81       	ldd	r30, Y+1	; 0x01
    249e:	fa 81       	ldd	r31, Y+2	; 0x02
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	93 8b       	std	Z+19, r25	; 0x13
    24a6:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    24a8:	29 96       	adiw	r28, 0x09	; 9
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	08 95       	ret

000024be <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	0f 92       	push	r0
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	13 c0       	rjmp	.+38     	; 0x24f2 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	c9 01       	movw	r24, r18
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	82 0f       	add	r24, r18
    24e2:	93 1f       	adc	r25, r19
    24e4:	80 5f       	subi	r24, 0xF0	; 240
    24e6:	9c 4f       	sbci	r25, 0xFC	; 252
    24e8:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	8f 5f       	subi	r24, 0xFF	; 255
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	85 30       	cpi	r24, 0x05	; 5
    24f6:	50 f3       	brcs	.-44     	; 0x24cc <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    24f8:	8d e3       	ldi	r24, 0x3D	; 61
    24fa:	93 e0       	ldi	r25, 0x03	; 3
    24fc:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    2500:	86 e4       	ldi	r24, 0x46	; 70
    2502:	93 e0       	ldi	r25, 0x03	; 3
    2504:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2508:	83 e5       	ldi	r24, 0x53	; 83
    250a:	93 e0       	ldi	r25, 0x03	; 3
    250c:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2510:	8c e5       	ldi	r24, 0x5C	; 92
    2512:	93 e0       	ldi	r25, 0x03	; 3
    2514:	0e 94 10 04 	call	0x820	; 0x820 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2518:	8d e3       	ldi	r24, 0x3D	; 61
    251a:	93 e0       	ldi	r25, 0x03	; 3
    251c:	90 93 50 03 	sts	0x0350, r25
    2520:	80 93 4f 03 	sts	0x034F, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2524:	86 e4       	ldi	r24, 0x46	; 70
    2526:	93 e0       	ldi	r25, 0x03	; 3
    2528:	90 93 52 03 	sts	0x0352, r25
    252c:	80 93 51 03 	sts	0x0351, r24
}
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <prvCheckTasksWaitingTermination+0x6>
    253e:	0f 92       	push	r0
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2544:	80 91 04 03 	lds	r24, 0x0304
    2548:	88 23       	and	r24, r24
    254a:	71 f1       	breq	.+92     	; 0x25a8 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    254c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2550:	80 91 5c 03 	lds	r24, 0x035C
    2554:	1b 82       	std	Y+3, r1	; 0x03
    2556:	88 23       	and	r24, r24
    2558:	11 f4       	brne	.+4      	; 0x255e <prvCheckTasksWaitingTermination+0x26>
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    255e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	88 23       	and	r24, r24
    2566:	01 f5       	brne	.+64     	; 0x25a8 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    256e:	e0 91 61 03 	lds	r30, 0x0361
    2572:	f0 91 62 03 	lds	r31, 0x0362
    2576:	86 81       	ldd	r24, Z+6	; 0x06
    2578:	97 81       	ldd	r25, Z+7	; 0x07
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	9a 81       	ldd	r25, Y+2	; 0x02
    2582:	02 96       	adiw	r24, 0x02	; 2
    2584:	0e 94 02 05 	call	0xa04	; 0xa04 <vListRemove>
					--uxCurrentNumberOfTasks;
    2588:	80 91 05 03 	lds	r24, 0x0305
    258c:	81 50       	subi	r24, 0x01	; 1
    258e:	80 93 05 03 	sts	0x0305, r24
					--uxTasksDeleted;
    2592:	80 91 04 03 	lds	r24, 0x0304
    2596:	81 50       	subi	r24, 0x01	; 1
    2598:	80 93 04 03 	sts	0x0304, r24
				}
				taskEXIT_CRITICAL();
    259c:	0f 90       	pop	r0
    259e:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <prvAddCurrentTaskToDelayedList+0x6>
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    25c2:	e0 91 02 03 	lds	r30, 0x0302
    25c6:	f0 91 03 03 	lds	r31, 0x0303
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	93 83       	std	Z+3, r25	; 0x03
    25d0:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    25d2:	20 91 06 03 	lds	r18, 0x0306
    25d6:	30 91 07 03 	lds	r19, 0x0307
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	82 17       	cp	r24, r18
    25e0:	93 07       	cpc	r25, r19
    25e2:	70 f4       	brcc	.+28     	; 0x2600 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    25e4:	80 91 51 03 	lds	r24, 0x0351
    25e8:	90 91 52 03 	lds	r25, 0x0352
    25ec:	20 91 02 03 	lds	r18, 0x0302
    25f0:	30 91 03 03 	lds	r19, 0x0303
    25f4:	2e 5f       	subi	r18, 0xFE	; 254
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	b9 01       	movw	r22, r18
    25fa:	0e 94 96 04 	call	0x92c	; 0x92c <vListInsert>
    25fe:	1e c0       	rjmp	.+60     	; 0x263c <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2600:	40 91 4f 03 	lds	r20, 0x034F
    2604:	50 91 50 03 	lds	r21, 0x0350
    2608:	80 91 02 03 	lds	r24, 0x0302
    260c:	90 91 03 03 	lds	r25, 0x0303
    2610:	9c 01       	movw	r18, r24
    2612:	2e 5f       	subi	r18, 0xFE	; 254
    2614:	3f 4f       	sbci	r19, 0xFF	; 255
    2616:	ca 01       	movw	r24, r20
    2618:	b9 01       	movw	r22, r18
    261a:	0e 94 96 04 	call	0x92c	; 0x92c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    261e:	20 91 6b 00 	lds	r18, 0x006B
    2622:	30 91 6c 00 	lds	r19, 0x006C
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	82 17       	cp	r24, r18
    262c:	93 07       	cpc	r25, r19
    262e:	30 f4       	brcc	.+12     	; 0x263c <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	90 93 6c 00 	sts	0x006C, r25
    2638:	80 93 6b 00 	sts	0x006B, r24
		}
	}
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	28 97       	sbiw	r28, 0x08	; 8
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	7e 83       	std	Y+6, r23	; 0x06
    2660:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    2662:	81 e2       	ldi	r24, 0x21	; 33
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 a4 03 	call	0x748	; 0x748 <pvPortMalloc>
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	9a 81       	ldd	r25, Y+2	; 0x02
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	69 f1       	breq	.+90     	; 0x26d0 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	39 f4       	brne	.+14     	; 0x268c <prvAllocateTCBAndStack+0x46>
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	0e 94 a4 03 	call	0x748	; 0x748 <pvPortMalloc>
    2686:	98 87       	std	Y+8, r25	; 0x08
    2688:	8f 83       	std	Y+7, r24	; 0x07
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <prvAllocateTCBAndStack+0x4e>
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	98 87       	std	Y+8, r25	; 0x08
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	e9 81       	ldd	r30, Y+1	; 0x01
    2696:	fa 81       	ldd	r31, Y+2	; 0x02
    2698:	8f 81       	ldd	r24, Y+7	; 0x07
    269a:	98 85       	ldd	r25, Y+8	; 0x08
    269c:	90 8f       	std	Z+24, r25	; 0x18
    269e:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    26a0:	e9 81       	ldd	r30, Y+1	; 0x01
    26a2:	fa 81       	ldd	r31, Y+2	; 0x02
    26a4:	87 89       	ldd	r24, Z+23	; 0x17
    26a6:	90 8d       	ldd	r25, Z+24	; 0x18
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	39 f4       	brne	.+14     	; 0x26ba <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <vPortFree>
			pxNewTCB = NULL;
    26b4:	1a 82       	std	Y+2, r1	; 0x02
    26b6:	19 82       	std	Y+1, r1	; 0x01
    26b8:	0b c0       	rjmp	.+22     	; 0x26d0 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    26ba:	e9 81       	ldd	r30, Y+1	; 0x01
    26bc:	fa 81       	ldd	r31, Y+2	; 0x02
    26be:	87 89       	ldd	r24, Z+23	; 0x17
    26c0:	90 8d       	ldd	r25, Z+24	; 0x18
    26c2:	2b 81       	ldd	r18, Y+3	; 0x03
    26c4:	3c 81       	ldd	r19, Y+4	; 0x04
    26c6:	65 ea       	ldi	r22, 0xA5	; 165
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	a9 01       	movw	r20, r18
    26cc:	0e 94 c9 14 	call	0x2992	; 0x2992 <memset>
		}
	}

	return pxNewTCB;
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    26d4:	28 96       	adiw	r28, 0x08	; 8
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <prvDeleteTCB+0x6>
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    26f4:	e9 81       	ldd	r30, Y+1	; 0x01
    26f6:	fa 81       	ldd	r31, Y+2	; 0x02
    26f8:	87 89       	ldd	r24, Z+23	; 0x17
    26fa:	90 8d       	ldd	r25, Z+24	; 0x18
    26fc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <vPortFree>
		vPortFree( pxTCB );
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <vPortFree>
	}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <__vector_12>:
uint8 g_lastBufferdInterruptSpiRecivedVal[50]={0};
uint8 g_lastBufferdInterrupSpiCntr=0;


ISR(SPI_STC_vect)
{
    2712:	1f 92       	push	r1
    2714:	0f 92       	push	r0
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	0f 92       	push	r0
    271a:	11 24       	eor	r1, r1
    271c:	2f 93       	push	r18
    271e:	3f 93       	push	r19
    2720:	4f 93       	push	r20
    2722:	5f 93       	push	r21
    2724:	6f 93       	push	r22
    2726:	7f 93       	push	r23
    2728:	8f 93       	push	r24
    272a:	9f 93       	push	r25
    272c:	af 93       	push	r26
    272e:	bf 93       	push	r27
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_Ptr!=NULL_PTR)
    273c:	80 91 65 03 	lds	r24, 0x0365
    2740:	90 91 66 03 	lds	r25, 0x0366
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	29 f0       	breq	.+10     	; 0x2752 <__vector_12+0x40>
	{
		(*g_callBack_Ptr)();
    2748:	e0 91 65 03 	lds	r30, 0x0365
    274c:	f0 91 66 03 	lds	r31, 0x0366
    2750:	09 95       	icall
	}

}
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	ff 91       	pop	r31
    2758:	ef 91       	pop	r30
    275a:	bf 91       	pop	r27
    275c:	af 91       	pop	r26
    275e:	9f 91       	pop	r25
    2760:	8f 91       	pop	r24
    2762:	7f 91       	pop	r23
    2764:	6f 91       	pop	r22
    2766:	5f 91       	pop	r21
    2768:	4f 91       	pop	r20
    276a:	3f 91       	pop	r19
    276c:	2f 91       	pop	r18
    276e:	0f 90       	pop	r0
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	0f 90       	pop	r0
    2774:	1f 90       	pop	r1
    2776:	18 95       	reti

00002778 <SPI_MasterInit>:



#if MASTER_MODE
void SPI_MasterInit(spiSettings* a_setting_Ptr)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <SPI_MasterInit+0x6>
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(DDRB,PB4);
    2786:	a7 e3       	ldi	r26, 0x37	; 55
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e7 e3       	ldi	r30, 0x37	; 55
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	80 61       	ori	r24, 0x10	; 16
    2792:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB5);
    2794:	a7 e3       	ldi	r26, 0x37	; 55
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e7 e3       	ldi	r30, 0x37	; 55
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	80 62       	ori	r24, 0x20	; 32
    27a0:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB7);
    27a2:	a7 e3       	ldi	r26, 0x37	; 55
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e7 e3       	ldi	r30, 0x37	; 55
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	80 68       	ori	r24, 0x80	; 128
    27ae:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB,PB6);
    27b0:	a7 e3       	ldi	r26, 0x37	; 55
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e7 e3       	ldi	r30, 0x37	; 55
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8f 7b       	andi	r24, 0xBF	; 191
    27bc:	8c 93       	st	X, r24
	SPCR=(1<<SPE)|(1<<MSTR)|(a_setting_Ptr->order<<DORD)|(a_setting_Ptr->plarity<<CPOL)|(a_setting_Ptr->phase<<CPHA)|(a_setting_Ptr->rate&0X03);
    27be:	ad e2       	ldi	r26, 0x2D	; 45
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e9 81       	ldd	r30, Y+1	; 0x01
    27c4:	fa 81       	ldd	r31, Y+2	; 0x02
    27c6:	80 81       	ld	r24, Z
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	82 95       	swap	r24
    27d2:	92 95       	swap	r25
    27d4:	90 7f       	andi	r25, 0xF0	; 240
    27d6:	98 27       	eor	r25, r24
    27d8:	80 7f       	andi	r24, 0xF0	; 240
    27da:	98 27       	eor	r25, r24
    27dc:	28 2f       	mov	r18, r24
    27de:	20 65       	ori	r18, 0x50	; 80
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	81 81       	ldd	r24, Z+1	; 0x01
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	28 2b       	or	r18, r24
    27f8:	e9 81       	ldd	r30, Y+1	; 0x01
    27fa:	fa 81       	ldd	r31, Y+2	; 0x02
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	88 2f       	mov	r24, r24
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	92 2f       	mov	r25, r18
    280c:	98 2b       	or	r25, r24
    280e:	e9 81       	ldd	r30, Y+1	; 0x01
    2810:	fa 81       	ldd	r31, Y+2	; 0x02
    2812:	83 81       	ldd	r24, Z+3	; 0x03
    2814:	83 70       	andi	r24, 0x03	; 3
    2816:	89 2b       	or	r24, r25
    2818:	8c 93       	st	X, r24
	(a_setting_Ptr->rate&0X04)?SPSR=1:0;
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	83 81       	ldd	r24, Z+3	; 0x03
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	84 70       	andi	r24, 0x04	; 4
    2826:	90 70       	andi	r25, 0x00	; 0
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	21 f0       	breq	.+8      	; 0x2834 <SPI_MasterInit+0xbc>
    282c:	ee e2       	ldi	r30, 0x2E	; 46
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	80 83       	st	Z, r24

}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <SPI_MasterSendReciveByte>:
	SPCR=(1<<SPE);
}
#endif

uint8 SPI_MasterSendReciveByte(uint8 a_data)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	0f 92       	push	r0
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	89 83       	std	Y+1, r24	; 0x01
	SPDR=a_data;
    284a:	ef e2       	ldi	r30, 0x2F	; 47
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	80 83       	st	Z, r24
	while(!(READ_BIT(SPSR,SPIF)));
    2852:	ee e2       	ldi	r30, 0x2E	; 46
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	88 1f       	adc	r24, r24
    285a:	88 27       	eor	r24, r24
    285c:	88 1f       	adc	r24, r24
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	90 70       	andi	r25, 0x00	; 0
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	a9 f3       	breq	.-22     	; 0x2852 <SPI_MasterSendReciveByte+0x14>
	return SPDR;
    2868:	ef e2       	ldi	r30, 0x2F	; 47
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
}
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <SPI_SlavePollngReciveByte>:

uint8 SPI_SlavePollngReciveByte(void)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	while(!(READ_BIT(SPSR,SPIF)));
    287e:	ee e2       	ldi	r30, 0x2E	; 46
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	88 1f       	adc	r24, r24
    2886:	88 27       	eor	r24, r24
    2888:	88 1f       	adc	r24, r24
    288a:	88 2f       	mov	r24, r24
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	90 70       	andi	r25, 0x00	; 0
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	a9 f3       	breq	.-22     	; 0x287e <SPI_SlavePollngReciveByte+0x8>
	return SPDR;
    2894:	ef e2       	ldi	r30, 0x2F	; 47
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
}
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <SPI_SendString>:


void SPI_SendString(const uint8* a_string_Ptr)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <SPI_SendString+0x6>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	0a c0       	rjmp	.+20     	; 0x28c4 <SPI_SendString+0x24>
	while((*(a_string_Ptr))!='\0')
	{
		SPI_MasterSendReciveByte((*(a_string_Ptr)));
    28b0:	e9 81       	ldd	r30, Y+1	; 0x01
    28b2:	fa 81       	ldd	r31, Y+2	; 0x02
    28b4:	80 81       	ld	r24, Z
    28b6:	0e 94 1f 14 	call	0x283e	; 0x283e <SPI_MasterSendReciveByte>
		a_string_Ptr++;
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
}


void SPI_SendString(const uint8* a_string_Ptr)
{
	while((*(a_string_Ptr))!='\0')
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	80 81       	ld	r24, Z
    28ca:	88 23       	and	r24, r24
    28cc:	89 f7       	brne	.-30     	; 0x28b0 <SPI_SendString+0x10>
	{
		SPI_MasterSendReciveByte((*(a_string_Ptr)));
		a_string_Ptr++;
	}
	SPI_MasterSendReciveByte(END_STRING_CHAR);
    28ce:	84 e2       	ldi	r24, 0x24	; 36
    28d0:	0e 94 1f 14 	call	0x283e	; 0x283e <SPI_MasterSendReciveByte>
}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <SPI_ReciveString>:

uint8* SPI_ReciveString(uint8* a_emptyString_Ptr)
{
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <SPI_ReciveString+0xa>
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	9b 83       	std	Y+3, r25	; 0x03
    28f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    28f2:	19 82       	std	Y+1, r1	; 0x01
    28f4:	0f c0       	rjmp	.+30     	; 0x2914 <SPI_ReciveString+0x36>
	while(a_emptyString_Ptr[i-1]!=END_STRING_CHAR)
	{
		a_emptyString_Ptr[i]=SPI_SlavePollngReciveByte();
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	8c 01       	movw	r16, r24
    2902:	02 0f       	add	r16, r18
    2904:	13 1f       	adc	r17, r19
    2906:	0e 94 3b 14 	call	0x2876	; 0x2876 <SPI_SlavePollngReciveByte>
    290a:	f8 01       	movw	r30, r16
    290c:	80 83       	st	Z, r24
		i++;
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	8f 5f       	subi	r24, 0xFF	; 255
    2912:	89 83       	std	Y+1, r24	; 0x01
}

uint8* SPI_ReciveString(uint8* a_emptyString_Ptr)
{
	uint8 i=0;
	while(a_emptyString_Ptr[i-1]!=END_STRING_CHAR)
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9c 01       	movw	r18, r24
    291c:	21 50       	subi	r18, 0x01	; 1
    291e:	30 40       	sbci	r19, 0x00	; 0
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	9b 81       	ldd	r25, Y+3	; 0x03
    2924:	fc 01       	movw	r30, r24
    2926:	e2 0f       	add	r30, r18
    2928:	f3 1f       	adc	r31, r19
    292a:	80 81       	ld	r24, Z
    292c:	84 32       	cpi	r24, 0x24	; 36
    292e:	19 f7       	brne	.-58     	; 0x28f6 <SPI_ReciveString+0x18>
	{
		a_emptyString_Ptr[i]=SPI_SlavePollngReciveByte();
		i++;
	}
	a_emptyString_Ptr[i-1]='\0';
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9c 01       	movw	r18, r24
    2938:	21 50       	subi	r18, 0x01	; 1
    293a:	30 40       	sbci	r19, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	fc 01       	movw	r30, r24
    2942:	e2 0f       	add	r30, r18
    2944:	f3 1f       	adc	r31, r19
    2946:	10 82       	st	Z, r1
	return &(a_emptyString_Ptr[0]);
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	08 95       	ret

0000295c <SPI_CallBackFunc>:


void SPI_CallBackFunc(void(*a_func_Ptr)(void))
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <SPI_CallBackFunc+0x6>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_Ptr=a_func_Ptr;
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	90 93 66 03 	sts	0x0366, r25
    2972:	80 93 65 03 	sts	0x0365, r24
}
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <memcpy>:
    2980:	fb 01       	movw	r30, r22
    2982:	dc 01       	movw	r26, r24
    2984:	02 c0       	rjmp	.+4      	; 0x298a <memcpy+0xa>
    2986:	01 90       	ld	r0, Z+
    2988:	0d 92       	st	X+, r0
    298a:	41 50       	subi	r20, 0x01	; 1
    298c:	50 40       	sbci	r21, 0x00	; 0
    298e:	d8 f7       	brcc	.-10     	; 0x2986 <memcpy+0x6>
    2990:	08 95       	ret

00002992 <memset>:
    2992:	dc 01       	movw	r26, r24
    2994:	01 c0       	rjmp	.+2      	; 0x2998 <memset+0x6>
    2996:	6d 93       	st	X+, r22
    2998:	41 50       	subi	r20, 0x01	; 1
    299a:	50 40       	sbci	r21, 0x00	; 0
    299c:	e0 f7       	brcc	.-8      	; 0x2996 <memset+0x4>
    299e:	08 95       	ret

000029a0 <strncpy>:
    29a0:	fb 01       	movw	r30, r22
    29a2:	dc 01       	movw	r26, r24
    29a4:	41 50       	subi	r20, 0x01	; 1
    29a6:	50 40       	sbci	r21, 0x00	; 0
    29a8:	48 f0       	brcs	.+18     	; 0x29bc <strncpy+0x1c>
    29aa:	01 90       	ld	r0, Z+
    29ac:	0d 92       	st	X+, r0
    29ae:	00 20       	and	r0, r0
    29b0:	c9 f7       	brne	.-14     	; 0x29a4 <strncpy+0x4>
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <strncpy+0x16>
    29b4:	1d 92       	st	X+, r1
    29b6:	41 50       	subi	r20, 0x01	; 1
    29b8:	50 40       	sbci	r21, 0x00	; 0
    29ba:	e0 f7       	brcc	.-8      	; 0x29b4 <strncpy+0x14>
    29bc:	08 95       	ret

000029be <_exit>:
    29be:	f8 94       	cli

000029c0 <__stop_program>:
    29c0:	ff cf       	rjmp	.-2      	; 0x29c0 <__stop_program>
